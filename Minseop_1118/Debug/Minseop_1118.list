
Minseop_1118.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005938  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08005a48  08005a48  00015a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bcc  08005bcc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005bcc  08005bcc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bcc  08005bcc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bcc  08005bcc  00015bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fa8  20000078  08005c4c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001020  08005c4c  00021020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f40  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a63  00000000  00000000  00031fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001128  00000000  00000000  00034a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  00035b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a120  00000000  00000000  00036b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cce3  00000000  00000000  00050cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009345d  00000000  00000000  0005d993  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0df0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000501c  00000000  00000000  000f0e6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08005a30 	.word	0x08005a30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08005a30 	.word	0x08005a30

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_Init+0x28>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <HAL_Init+0x28>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f945 	bl	8000bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	200f      	movs	r0, #15
 8000954:	f000 f808 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f003 fe9e 	bl	8004698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x54>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_InitTick+0x58>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f95d 	bl	8000c46 <HAL_SYSTICK_Config>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e00e      	b.n	80009b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d80a      	bhi.n	80009b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099c:	2200      	movs	r2, #0
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f000 f925 	bl	8000bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <HAL_InitTick+0x5c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000010 	.word	0x20000010
 80009c0:	20000004 	.word	0x20000004
 80009c4:	20000000 	.word	0x20000000

080009c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_IncTick+0x1c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_IncTick+0x20>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a03      	ldr	r2, [pc, #12]	; (80009e8 <HAL_IncTick+0x20>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	20000004 	.word	0x20000004
 80009e8:	20000ef0 	.word	0x20000ef0

080009ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b02      	ldr	r3, [pc, #8]	; (80009fc <HAL_GetTick+0x10>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	20000ef0 	.word	0x20000ef0

08000a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a08:	f7ff fff0 	bl	80009ec <HAL_GetTick>
 8000a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a18:	d005      	beq.n	8000a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_Delay+0x40>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a26:	bf00      	nop
 8000a28:	f7ff ffe0 	bl	80009ec <HAL_GetTick>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d8f7      	bhi.n	8000a28 <HAL_Delay+0x28>
  {
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000004 	.word	0x20000004

08000a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a76:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	f003 0307 	and.w	r3, r3, #7
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db0b      	blt.n	8000ad2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	f003 021f 	and.w	r2, r3, #31
 8000ac0:	4906      	ldr	r1, [pc, #24]	; (8000adc <__NVIC_EnableIRQ+0x34>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	2001      	movs	r0, #1
 8000aca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	; (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	; (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba8:	d301      	bcc.n	8000bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00f      	b.n	8000bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <SysTick_Config+0x40>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f7ff ff90 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <SysTick_Config+0x40>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <SysTick_Config+0x40>)
 8000bc8:	2207      	movs	r2, #7
 8000bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	e000e010 	.word	0xe000e010

08000bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff2d 	bl	8000a44 <__NVIC_SetPriorityGrouping>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c04:	f7ff ff42 	bl	8000a8c <__NVIC_GetPriorityGrouping>
 8000c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	68b9      	ldr	r1, [r7, #8]
 8000c0e:	6978      	ldr	r0, [r7, #20]
 8000c10:	f7ff ff90 	bl	8000b34 <NVIC_EncodePriority>
 8000c14:	4602      	mov	r2, r0
 8000c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff5f 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff35 	bl	8000aa8 <__NVIC_EnableIRQ>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffa2 	bl	8000b98 <SysTick_Config>
 8000c54:	4603      	mov	r3, r0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b08b      	sub	sp, #44	; 0x2c
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c72:	e127      	b.n	8000ec4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c74:	2201      	movs	r2, #1
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	69fa      	ldr	r2, [r7, #28]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	f040 8116 	bne.w	8000ebe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b12      	cmp	r3, #18
 8000c98:	d034      	beq.n	8000d04 <HAL_GPIO_Init+0xa4>
 8000c9a:	2b12      	cmp	r3, #18
 8000c9c:	d80d      	bhi.n	8000cba <HAL_GPIO_Init+0x5a>
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d02b      	beq.n	8000cfa <HAL_GPIO_Init+0x9a>
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d804      	bhi.n	8000cb0 <HAL_GPIO_Init+0x50>
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d031      	beq.n	8000d0e <HAL_GPIO_Init+0xae>
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d01c      	beq.n	8000ce8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cae:	e048      	b.n	8000d42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d043      	beq.n	8000d3c <HAL_GPIO_Init+0xdc>
 8000cb4:	2b11      	cmp	r3, #17
 8000cb6:	d01b      	beq.n	8000cf0 <HAL_GPIO_Init+0x90>
          break;
 8000cb8:	e043      	b.n	8000d42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cba:	4a89      	ldr	r2, [pc, #548]	; (8000ee0 <HAL_GPIO_Init+0x280>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d026      	beq.n	8000d0e <HAL_GPIO_Init+0xae>
 8000cc0:	4a87      	ldr	r2, [pc, #540]	; (8000ee0 <HAL_GPIO_Init+0x280>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d806      	bhi.n	8000cd4 <HAL_GPIO_Init+0x74>
 8000cc6:	4a87      	ldr	r2, [pc, #540]	; (8000ee4 <HAL_GPIO_Init+0x284>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d020      	beq.n	8000d0e <HAL_GPIO_Init+0xae>
 8000ccc:	4a86      	ldr	r2, [pc, #536]	; (8000ee8 <HAL_GPIO_Init+0x288>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d01d      	beq.n	8000d0e <HAL_GPIO_Init+0xae>
          break;
 8000cd2:	e036      	b.n	8000d42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cd4:	4a85      	ldr	r2, [pc, #532]	; (8000eec <HAL_GPIO_Init+0x28c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d019      	beq.n	8000d0e <HAL_GPIO_Init+0xae>
 8000cda:	4a85      	ldr	r2, [pc, #532]	; (8000ef0 <HAL_GPIO_Init+0x290>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d016      	beq.n	8000d0e <HAL_GPIO_Init+0xae>
 8000ce0:	4a84      	ldr	r2, [pc, #528]	; (8000ef4 <HAL_GPIO_Init+0x294>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d013      	beq.n	8000d0e <HAL_GPIO_Init+0xae>
          break;
 8000ce6:	e02c      	b.n	8000d42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	623b      	str	r3, [r7, #32]
          break;
 8000cee:	e028      	b.n	8000d42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	623b      	str	r3, [r7, #32]
          break;
 8000cf8:	e023      	b.n	8000d42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	3308      	adds	r3, #8
 8000d00:	623b      	str	r3, [r7, #32]
          break;
 8000d02:	e01e      	b.n	8000d42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	330c      	adds	r3, #12
 8000d0a:	623b      	str	r3, [r7, #32]
          break;
 8000d0c:	e019      	b.n	8000d42 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d102      	bne.n	8000d1c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d16:	2304      	movs	r3, #4
 8000d18:	623b      	str	r3, [r7, #32]
          break;
 8000d1a:	e012      	b.n	8000d42 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d105      	bne.n	8000d30 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d24:	2308      	movs	r3, #8
 8000d26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69fa      	ldr	r2, [r7, #28]
 8000d2c:	611a      	str	r2, [r3, #16]
          break;
 8000d2e:	e008      	b.n	8000d42 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d30:	2308      	movs	r3, #8
 8000d32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	615a      	str	r2, [r3, #20]
          break;
 8000d3a:	e002      	b.n	8000d42 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
          break;
 8000d40:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	2bff      	cmp	r3, #255	; 0xff
 8000d46:	d801      	bhi.n	8000d4c <HAL_GPIO_Init+0xec>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	e001      	b.n	8000d50 <HAL_GPIO_Init+0xf0>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3304      	adds	r3, #4
 8000d50:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	2bff      	cmp	r3, #255	; 0xff
 8000d56:	d802      	bhi.n	8000d5e <HAL_GPIO_Init+0xfe>
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	e002      	b.n	8000d64 <HAL_GPIO_Init+0x104>
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	3b08      	subs	r3, #8
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	401a      	ands	r2, r3
 8000d76:	6a39      	ldr	r1, [r7, #32]
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 8096 	beq.w	8000ebe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d92:	4b59      	ldr	r3, [pc, #356]	; (8000ef8 <HAL_GPIO_Init+0x298>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	4a58      	ldr	r2, [pc, #352]	; (8000ef8 <HAL_GPIO_Init+0x298>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6193      	str	r3, [r2, #24]
 8000d9e:	4b56      	ldr	r3, [pc, #344]	; (8000ef8 <HAL_GPIO_Init+0x298>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000daa:	4a54      	ldr	r2, [pc, #336]	; (8000efc <HAL_GPIO_Init+0x29c>)
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	3302      	adds	r3, #2
 8000db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4b      	ldr	r2, [pc, #300]	; (8000f00 <HAL_GPIO_Init+0x2a0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d013      	beq.n	8000dfe <HAL_GPIO_Init+0x19e>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a4a      	ldr	r2, [pc, #296]	; (8000f04 <HAL_GPIO_Init+0x2a4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00d      	beq.n	8000dfa <HAL_GPIO_Init+0x19a>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a49      	ldr	r2, [pc, #292]	; (8000f08 <HAL_GPIO_Init+0x2a8>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d007      	beq.n	8000df6 <HAL_GPIO_Init+0x196>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a48      	ldr	r2, [pc, #288]	; (8000f0c <HAL_GPIO_Init+0x2ac>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_GPIO_Init+0x192>
 8000dee:	2303      	movs	r3, #3
 8000df0:	e006      	b.n	8000e00 <HAL_GPIO_Init+0x1a0>
 8000df2:	2304      	movs	r3, #4
 8000df4:	e004      	b.n	8000e00 <HAL_GPIO_Init+0x1a0>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e002      	b.n	8000e00 <HAL_GPIO_Init+0x1a0>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <HAL_GPIO_Init+0x1a0>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e02:	f002 0203 	and.w	r2, r2, #3
 8000e06:	0092      	lsls	r2, r2, #2
 8000e08:	4093      	lsls	r3, r2
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e10:	493a      	ldr	r1, [pc, #232]	; (8000efc <HAL_GPIO_Init+0x29c>)
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	089b      	lsrs	r3, r3, #2
 8000e16:	3302      	adds	r3, #2
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d006      	beq.n	8000e38 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e2a:	4b39      	ldr	r3, [pc, #228]	; (8000f10 <HAL_GPIO_Init+0x2b0>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4938      	ldr	r1, [pc, #224]	; (8000f10 <HAL_GPIO_Init+0x2b0>)
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	600b      	str	r3, [r1, #0]
 8000e36:	e006      	b.n	8000e46 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e38:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <HAL_GPIO_Init+0x2b0>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	4933      	ldr	r1, [pc, #204]	; (8000f10 <HAL_GPIO_Init+0x2b0>)
 8000e42:	4013      	ands	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d006      	beq.n	8000e60 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e52:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <HAL_GPIO_Init+0x2b0>)
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	492e      	ldr	r1, [pc, #184]	; (8000f10 <HAL_GPIO_Init+0x2b0>)
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	604b      	str	r3, [r1, #4]
 8000e5e:	e006      	b.n	8000e6e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e60:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <HAL_GPIO_Init+0x2b0>)
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	4929      	ldr	r1, [pc, #164]	; (8000f10 <HAL_GPIO_Init+0x2b0>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d006      	beq.n	8000e88 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e7a:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <HAL_GPIO_Init+0x2b0>)
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	4924      	ldr	r1, [pc, #144]	; (8000f10 <HAL_GPIO_Init+0x2b0>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	608b      	str	r3, [r1, #8]
 8000e86:	e006      	b.n	8000e96 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <HAL_GPIO_Init+0x2b0>)
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	491f      	ldr	r1, [pc, #124]	; (8000f10 <HAL_GPIO_Init+0x2b0>)
 8000e92:	4013      	ands	r3, r2
 8000e94:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d006      	beq.n	8000eb0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_GPIO_Init+0x2b0>)
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	491a      	ldr	r1, [pc, #104]	; (8000f10 <HAL_GPIO_Init+0x2b0>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	60cb      	str	r3, [r1, #12]
 8000eae:	e006      	b.n	8000ebe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <HAL_GPIO_Init+0x2b0>)
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	4915      	ldr	r1, [pc, #84]	; (8000f10 <HAL_GPIO_Init+0x2b0>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	fa22 f303 	lsr.w	r3, r2, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f47f aed0 	bne.w	8000c74 <HAL_GPIO_Init+0x14>
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	372c      	adds	r7, #44	; 0x2c
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	10210000 	.word	0x10210000
 8000ee4:	10110000 	.word	0x10110000
 8000ee8:	10120000 	.word	0x10120000
 8000eec:	10310000 	.word	0x10310000
 8000ef0:	10320000 	.word	0x10320000
 8000ef4:	10220000 	.word	0x10220000
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000
 8000f00:	40010800 	.word	0x40010800
 8000f04:	40010c00 	.word	0x40010c00
 8000f08:	40011000 	.word	0x40011000
 8000f0c:	40011400 	.word	0x40011400
 8000f10:	40010400 	.word	0x40010400

08000f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e001      	b.n	8000f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	807b      	strh	r3, [r7, #2]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f52:	787b      	ldrb	r3, [r7, #1]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f58:	887a      	ldrh	r2, [r7, #2]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f5e:	e003      	b.n	8000f68 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f60:	887b      	ldrh	r3, [r7, #2]
 8000f62:	041a      	lsls	r2, r3, #16
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	611a      	str	r2, [r3, #16]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
	...

08000f74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f80:	695a      	ldr	r2, [r3, #20]
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	4013      	ands	r3, r2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 ffa4 	bl	8003ee0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40010400 	.word	0x40010400

08000fa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e26c      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 8087 	beq.w	80010d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fc4:	4b92      	ldr	r3, [pc, #584]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 030c 	and.w	r3, r3, #12
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d00c      	beq.n	8000fea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fd0:	4b8f      	ldr	r3, [pc, #572]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 030c 	and.w	r3, r3, #12
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d112      	bne.n	8001002 <HAL_RCC_OscConfig+0x5e>
 8000fdc:	4b8c      	ldr	r3, [pc, #560]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe8:	d10b      	bne.n	8001002 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fea:	4b89      	ldr	r3, [pc, #548]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d06c      	beq.n	80010d0 <HAL_RCC_OscConfig+0x12c>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d168      	bne.n	80010d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e246      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100a:	d106      	bne.n	800101a <HAL_RCC_OscConfig+0x76>
 800100c:	4b80      	ldr	r3, [pc, #512]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a7f      	ldr	r2, [pc, #508]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	e02e      	b.n	8001078 <HAL_RCC_OscConfig+0xd4>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10c      	bne.n	800103c <HAL_RCC_OscConfig+0x98>
 8001022:	4b7b      	ldr	r3, [pc, #492]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a7a      	ldr	r2, [pc, #488]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	4b78      	ldr	r3, [pc, #480]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a77      	ldr	r2, [pc, #476]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e01d      	b.n	8001078 <HAL_RCC_OscConfig+0xd4>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001044:	d10c      	bne.n	8001060 <HAL_RCC_OscConfig+0xbc>
 8001046:	4b72      	ldr	r3, [pc, #456]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a71      	ldr	r2, [pc, #452]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800104c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b6f      	ldr	r3, [pc, #444]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a6e      	ldr	r2, [pc, #440]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e00b      	b.n	8001078 <HAL_RCC_OscConfig+0xd4>
 8001060:	4b6b      	ldr	r3, [pc, #428]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a6a      	ldr	r2, [pc, #424]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b68      	ldr	r3, [pc, #416]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a67      	ldr	r2, [pc, #412]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001076:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d013      	beq.n	80010a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001080:	f7ff fcb4 	bl	80009ec <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001088:	f7ff fcb0 	bl	80009ec <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b64      	cmp	r3, #100	; 0x64
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e1fa      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0f0      	beq.n	8001088 <HAL_RCC_OscConfig+0xe4>
 80010a6:	e014      	b.n	80010d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fca0 	bl	80009ec <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fc9c 	bl	80009ec <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b64      	cmp	r3, #100	; 0x64
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e1e6      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c2:	4b53      	ldr	r3, [pc, #332]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0x10c>
 80010ce:	e000      	b.n	80010d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d063      	beq.n	80011a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010de:	4b4c      	ldr	r3, [pc, #304]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00b      	beq.n	8001102 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010ea:	4b49      	ldr	r3, [pc, #292]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d11c      	bne.n	8001130 <HAL_RCC_OscConfig+0x18c>
 80010f6:	4b46      	ldr	r3, [pc, #280]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d116      	bne.n	8001130 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001102:	4b43      	ldr	r3, [pc, #268]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d005      	beq.n	800111a <HAL_RCC_OscConfig+0x176>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d001      	beq.n	800111a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e1ba      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111a:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4939      	ldr	r1, [pc, #228]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800112a:	4313      	orrs	r3, r2
 800112c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112e:	e03a      	b.n	80011a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d020      	beq.n	800117a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001138:	4b36      	ldr	r3, [pc, #216]	; (8001214 <HAL_RCC_OscConfig+0x270>)
 800113a:	2201      	movs	r2, #1
 800113c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113e:	f7ff fc55 	bl	80009ec <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001146:	f7ff fc51 	bl	80009ec <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e19b      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f0      	beq.n	8001146 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001164:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	4927      	ldr	r1, [pc, #156]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001174:	4313      	orrs	r3, r2
 8001176:	600b      	str	r3, [r1, #0]
 8001178:	e015      	b.n	80011a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <HAL_RCC_OscConfig+0x270>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fc34 	bl	80009ec <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001188:	f7ff fc30 	bl	80009ec <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e17a      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d03a      	beq.n	8001228 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d019      	beq.n	80011ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_RCC_OscConfig+0x274>)
 80011bc:	2201      	movs	r2, #1
 80011be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c0:	f7ff fc14 	bl	80009ec <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c8:	f7ff fc10 	bl	80009ec <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e15a      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011e6:	2001      	movs	r0, #1
 80011e8:	f000 fada 	bl	80017a0 <RCC_Delay>
 80011ec:	e01c      	b.n	8001228 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_RCC_OscConfig+0x274>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f4:	f7ff fbfa 	bl	80009ec <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011fa:	e00f      	b.n	800121c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fc:	f7ff fbf6 	bl	80009ec <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d908      	bls.n	800121c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e140      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	42420000 	.word	0x42420000
 8001218:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121c:	4b9e      	ldr	r3, [pc, #632]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1e9      	bne.n	80011fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80a6 	beq.w	8001382 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800123a:	4b97      	ldr	r3, [pc, #604]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10d      	bne.n	8001262 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	4b94      	ldr	r3, [pc, #592]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4a93      	ldr	r2, [pc, #588]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001250:	61d3      	str	r3, [r2, #28]
 8001252:	4b91      	ldr	r3, [pc, #580]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800125e:	2301      	movs	r3, #1
 8001260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001262:	4b8e      	ldr	r3, [pc, #568]	; (800149c <HAL_RCC_OscConfig+0x4f8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126a:	2b00      	cmp	r3, #0
 800126c:	d118      	bne.n	80012a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800126e:	4b8b      	ldr	r3, [pc, #556]	; (800149c <HAL_RCC_OscConfig+0x4f8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a8a      	ldr	r2, [pc, #552]	; (800149c <HAL_RCC_OscConfig+0x4f8>)
 8001274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127a:	f7ff fbb7 	bl	80009ec <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001282:	f7ff fbb3 	bl	80009ec <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b64      	cmp	r3, #100	; 0x64
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e0fd      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001294:	4b81      	ldr	r3, [pc, #516]	; (800149c <HAL_RCC_OscConfig+0x4f8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d106      	bne.n	80012b6 <HAL_RCC_OscConfig+0x312>
 80012a8:	4b7b      	ldr	r3, [pc, #492]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	4a7a      	ldr	r2, [pc, #488]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6213      	str	r3, [r2, #32]
 80012b4:	e02d      	b.n	8001312 <HAL_RCC_OscConfig+0x36e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x334>
 80012be:	4b76      	ldr	r3, [pc, #472]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4a75      	ldr	r2, [pc, #468]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	f023 0301 	bic.w	r3, r3, #1
 80012c8:	6213      	str	r3, [r2, #32]
 80012ca:	4b73      	ldr	r3, [pc, #460]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	4a72      	ldr	r2, [pc, #456]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	f023 0304 	bic.w	r3, r3, #4
 80012d4:	6213      	str	r3, [r2, #32]
 80012d6:	e01c      	b.n	8001312 <HAL_RCC_OscConfig+0x36e>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b05      	cmp	r3, #5
 80012de:	d10c      	bne.n	80012fa <HAL_RCC_OscConfig+0x356>
 80012e0:	4b6d      	ldr	r3, [pc, #436]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4a6c      	ldr	r2, [pc, #432]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6213      	str	r3, [r2, #32]
 80012ec:	4b6a      	ldr	r3, [pc, #424]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	4a69      	ldr	r2, [pc, #420]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6213      	str	r3, [r2, #32]
 80012f8:	e00b      	b.n	8001312 <HAL_RCC_OscConfig+0x36e>
 80012fa:	4b67      	ldr	r3, [pc, #412]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	4a66      	ldr	r2, [pc, #408]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	6213      	str	r3, [r2, #32]
 8001306:	4b64      	ldr	r3, [pc, #400]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	4a63      	ldr	r2, [pc, #396]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 800130c:	f023 0304 	bic.w	r3, r3, #4
 8001310:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d015      	beq.n	8001346 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fb67 	bl	80009ec <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001320:	e00a      	b.n	8001338 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001322:	f7ff fb63 	bl	80009ec <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001330:	4293      	cmp	r3, r2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e0ab      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001338:	4b57      	ldr	r3, [pc, #348]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0ee      	beq.n	8001322 <HAL_RCC_OscConfig+0x37e>
 8001344:	e014      	b.n	8001370 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001346:	f7ff fb51 	bl	80009ec <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134c:	e00a      	b.n	8001364 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800134e:	f7ff fb4d 	bl	80009ec <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	f241 3288 	movw	r2, #5000	; 0x1388
 800135c:	4293      	cmp	r3, r2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e095      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001364:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1ee      	bne.n	800134e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001370:	7dfb      	ldrb	r3, [r7, #23]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d105      	bne.n	8001382 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001376:	4b48      	ldr	r3, [pc, #288]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a47      	ldr	r2, [pc, #284]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 800137c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001380:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 8081 	beq.w	800148e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800138c:	4b42      	ldr	r3, [pc, #264]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 030c 	and.w	r3, r3, #12
 8001394:	2b08      	cmp	r3, #8
 8001396:	d061      	beq.n	800145c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d146      	bne.n	800142e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a0:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <HAL_RCC_OscConfig+0x4fc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a6:	f7ff fb21 	bl	80009ec <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff fb1d 	bl	80009ec <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e067      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c0:	4b35      	ldr	r3, [pc, #212]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f0      	bne.n	80013ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d4:	d108      	bne.n	80013e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	492d      	ldr	r1, [pc, #180]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e8:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a19      	ldr	r1, [r3, #32]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	430b      	orrs	r3, r1
 80013fa:	4927      	ldr	r1, [pc, #156]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001400:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <HAL_RCC_OscConfig+0x4fc>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff faf1 	bl	80009ec <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140e:	f7ff faed 	bl	80009ec <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e037      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x46a>
 800142c:	e02f      	b.n	800148e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <HAL_RCC_OscConfig+0x4fc>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fada 	bl	80009ec <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff fad6 	bl	80009ec <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e020      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x498>
 800145a:	e018      	b.n	800148e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e013      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	429a      	cmp	r2, r3
 800147a:	d106      	bne.n	800148a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001486:	429a      	cmp	r2, r3
 8001488:	d001      	beq.n	800148e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	40007000 	.word	0x40007000
 80014a0:	42420060 	.word	0x42420060

080014a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0d0      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b8:	4b6a      	ldr	r3, [pc, #424]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d910      	bls.n	80014e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c6:	4b67      	ldr	r3, [pc, #412]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 0207 	bic.w	r2, r3, #7
 80014ce:	4965      	ldr	r1, [pc, #404]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d6:	4b63      	ldr	r3, [pc, #396]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0b8      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d020      	beq.n	8001536 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001500:	4b59      	ldr	r3, [pc, #356]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a58      	ldr	r2, [pc, #352]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800150a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001518:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4a52      	ldr	r2, [pc, #328]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001522:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001524:	4b50      	ldr	r3, [pc, #320]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	494d      	ldr	r1, [pc, #308]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d040      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d115      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e07f      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d107      	bne.n	8001572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001562:	4b41      	ldr	r3, [pc, #260]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e073      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001572:	4b3d      	ldr	r3, [pc, #244]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e06b      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001582:	4b39      	ldr	r3, [pc, #228]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f023 0203 	bic.w	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4936      	ldr	r1, [pc, #216]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001594:	f7ff fa2a 	bl	80009ec <HAL_GetTick>
 8001598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159c:	f7ff fa26 	bl	80009ec <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e053      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b2:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 020c 	and.w	r2, r3, #12
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d1eb      	bne.n	800159c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d210      	bcs.n	80015f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b24      	ldr	r3, [pc, #144]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 0207 	bic.w	r2, r3, #7
 80015da:	4922      	ldr	r1, [pc, #136]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	4313      	orrs	r3, r2
 80015e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e032      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d008      	beq.n	8001612 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4916      	ldr	r1, [pc, #88]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d009      	beq.n	8001632 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	490e      	ldr	r1, [pc, #56]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	4313      	orrs	r3, r2
 8001630:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001632:	f000 f821 	bl	8001678 <HAL_RCC_GetSysClockFreq>
 8001636:	4601      	mov	r1, r0
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <HAL_RCC_ClockConfig+0x1c8>)
 8001644:	5cd3      	ldrb	r3, [r2, r3]
 8001646:	fa21 f303 	lsr.w	r3, r1, r3
 800164a:	4a09      	ldr	r2, [pc, #36]	; (8001670 <HAL_RCC_ClockConfig+0x1cc>)
 800164c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_RCC_ClockConfig+0x1d0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff f988 	bl	8000968 <HAL_InitTick>

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40022000 	.word	0x40022000
 8001668:	40021000 	.word	0x40021000
 800166c:	08005b1c 	.word	0x08005b1c
 8001670:	20000010 	.word	0x20000010
 8001674:	20000000 	.word	0x20000000

08001678 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001678:	b490      	push	{r4, r7}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001680:	1d3c      	adds	r4, r7, #4
 8001682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001688:	4b28      	ldr	r3, [pc, #160]	; (800172c <HAL_RCC_GetSysClockFreq+0xb4>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016a2:	4b23      	ldr	r3, [pc, #140]	; (8001730 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d002      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x40>
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d003      	beq.n	80016be <HAL_RCC_GetSysClockFreq+0x46>
 80016b6:	e02d      	b.n	8001714 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016ba:	623b      	str	r3, [r7, #32]
      break;
 80016bc:	e02d      	b.n	800171a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	0c9b      	lsrs	r3, r3, #18
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016ca:	4413      	add	r3, r2
 80016cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d013      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	0c5b      	lsrs	r3, r3, #17
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016ea:	4413      	add	r3, r2
 80016ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	4a0f      	ldr	r2, [pc, #60]	; (8001734 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016f6:	fb02 f203 	mul.w	r2, r2, r3
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
 8001702:	e004      	b.n	800170e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001708:	fb02 f303 	mul.w	r3, r2, r3
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	623b      	str	r3, [r7, #32]
      break;
 8001712:	e002      	b.n	800171a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001716:	623b      	str	r3, [r7, #32]
      break;
 8001718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800171a:	6a3b      	ldr	r3, [r7, #32]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3728      	adds	r7, #40	; 0x28
 8001720:	46bd      	mov	sp, r7
 8001722:	bc90      	pop	{r4, r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	08005a48 	.word	0x08005a48
 800172c:	08005a58 	.word	0x08005a58
 8001730:	40021000 	.word	0x40021000
 8001734:	007a1200 	.word	0x007a1200
 8001738:	003d0900 	.word	0x003d0900

0800173c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001740:	4b02      	ldr	r3, [pc, #8]	; (800174c <HAL_RCC_GetHCLKFreq+0x10>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	20000010 	.word	0x20000010

08001750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001754:	f7ff fff2 	bl	800173c <HAL_RCC_GetHCLKFreq>
 8001758:	4601      	mov	r1, r0
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	4a03      	ldr	r2, [pc, #12]	; (8001774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001766:	5cd3      	ldrb	r3, [r2, r3]
 8001768:	fa21 f303 	lsr.w	r3, r1, r3
}
 800176c:	4618      	mov	r0, r3
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40021000 	.word	0x40021000
 8001774:	08005b2c 	.word	0x08005b2c

08001778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800177c:	f7ff ffde 	bl	800173c <HAL_RCC_GetHCLKFreq>
 8001780:	4601      	mov	r1, r0
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	0adb      	lsrs	r3, r3, #11
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	4a03      	ldr	r2, [pc, #12]	; (800179c <HAL_RCC_GetPCLK2Freq+0x24>)
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001794:	4618      	mov	r0, r3
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	08005b2c 	.word	0x08005b2c

080017a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <RCC_Delay+0x34>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <RCC_Delay+0x38>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	0a5b      	lsrs	r3, r3, #9
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017bc:	bf00      	nop
  }
  while (Delay --);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1e5a      	subs	r2, r3, #1
 80017c2:	60fa      	str	r2, [r7, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f9      	bne.n	80017bc <RCC_Delay+0x1c>
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000010 	.word	0x20000010
 80017d8:	10624dd3 	.word	0x10624dd3

080017dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e041      	b.n	8001872 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d106      	bne.n	8001808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f002 ff80 	bl	8004708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2202      	movs	r2, #2
 800180c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3304      	adds	r3, #4
 8001818:	4619      	mov	r1, r3
 800181a:	4610      	mov	r0, r2
 800181c:	f000 fb72 	bl	8001f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b01      	cmp	r3, #1
 800188e:	d001      	beq.n	8001894 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e032      	b.n	80018fa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2202      	movs	r2, #2
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a18      	ldr	r2, [pc, #96]	; (8001904 <HAL_TIM_Base_Start+0x88>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00e      	beq.n	80018c4 <HAL_TIM_Base_Start+0x48>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ae:	d009      	beq.n	80018c4 <HAL_TIM_Base_Start+0x48>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <HAL_TIM_Base_Start+0x8c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d004      	beq.n	80018c4 <HAL_TIM_Base_Start+0x48>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a13      	ldr	r2, [pc, #76]	; (800190c <HAL_TIM_Base_Start+0x90>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d111      	bne.n	80018e8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d010      	beq.n	80018f8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0201 	orr.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e6:	e007      	b.n	80018f8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	40012c00 	.word	0x40012c00
 8001908:	40000400 	.word	0x40000400
 800190c:	40000800 	.word	0x40000800

08001910 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6a1a      	ldr	r2, [r3, #32]
 800191e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10f      	bne.n	8001948 <HAL_TIM_Base_Stop+0x38>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6a1a      	ldr	r2, [r3, #32]
 800192e:	f240 4344 	movw	r3, #1092	; 0x444
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d107      	bne.n	8001948 <HAL_TIM_Base_Stop+0x38>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e041      	b.n	80019f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f839 	bl	80019fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3304      	adds	r3, #4
 8001998:	4619      	mov	r1, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f000 fab2 	bl	8001f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d109      	bne.n	8001a30 <HAL_TIM_PWM_Start+0x24>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	bf14      	ite	ne
 8001a28:	2301      	movne	r3, #1
 8001a2a:	2300      	moveq	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	e022      	b.n	8001a76 <HAL_TIM_PWM_Start+0x6a>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d109      	bne.n	8001a4a <HAL_TIM_PWM_Start+0x3e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	e015      	b.n	8001a76 <HAL_TIM_PWM_Start+0x6a>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d109      	bne.n	8001a64 <HAL_TIM_PWM_Start+0x58>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	bf14      	ite	ne
 8001a5c:	2301      	movne	r3, #1
 8001a5e:	2300      	moveq	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	e008      	b.n	8001a76 <HAL_TIM_PWM_Start+0x6a>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e05e      	b.n	8001b3c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d104      	bne.n	8001a8e <HAL_TIM_PWM_Start+0x82>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a8c:	e013      	b.n	8001ab6 <HAL_TIM_PWM_Start+0xaa>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d104      	bne.n	8001a9e <HAL_TIM_PWM_Start+0x92>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a9c:	e00b      	b.n	8001ab6 <HAL_TIM_PWM_Start+0xaa>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d104      	bne.n	8001aae <HAL_TIM_PWM_Start+0xa2>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001aac:	e003      	b.n	8001ab6 <HAL_TIM_PWM_Start+0xaa>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2201      	movs	r2, #1
 8001abc:	6839      	ldr	r1, [r7, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 fca0 	bl	8002404 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1e      	ldr	r2, [pc, #120]	; (8001b44 <HAL_TIM_PWM_Start+0x138>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d107      	bne.n	8001ade <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <HAL_TIM_PWM_Start+0x138>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d00e      	beq.n	8001b06 <HAL_TIM_PWM_Start+0xfa>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af0:	d009      	beq.n	8001b06 <HAL_TIM_PWM_Start+0xfa>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <HAL_TIM_PWM_Start+0x13c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d004      	beq.n	8001b06 <HAL_TIM_PWM_Start+0xfa>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <HAL_TIM_PWM_Start+0x140>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d111      	bne.n	8001b2a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2b06      	cmp	r3, #6
 8001b16:	d010      	beq.n	8001b3a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b28:	e007      	b.n	8001b3a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0201 	orr.w	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40012c00 	.word	0x40012c00
 8001b48:	40000400 	.word	0x40000400
 8001b4c:	40000800 	.word	0x40000800

08001b50 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	6839      	ldr	r1, [r7, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fc4e 	bl	8002404 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a29      	ldr	r2, [pc, #164]	; (8001c14 <HAL_TIM_PWM_Stop+0xc4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d117      	bne.n	8001ba2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6a1a      	ldr	r2, [r3, #32]
 8001b78:	f241 1311 	movw	r3, #4369	; 0x1111
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10f      	bne.n	8001ba2 <HAL_TIM_PWM_Stop+0x52>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6a1a      	ldr	r2, [r3, #32]
 8001b88:	f240 4344 	movw	r3, #1092	; 0x444
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d107      	bne.n	8001ba2 <HAL_TIM_PWM_Stop+0x52>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6a1a      	ldr	r2, [r3, #32]
 8001ba8:	f241 1311 	movw	r3, #4369	; 0x1111
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10f      	bne.n	8001bd2 <HAL_TIM_PWM_Stop+0x82>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6a1a      	ldr	r2, [r3, #32]
 8001bb8:	f240 4344 	movw	r3, #1092	; 0x444
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d107      	bne.n	8001bd2 <HAL_TIM_PWM_Stop+0x82>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0201 	bic.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d104      	bne.n	8001be2 <HAL_TIM_PWM_Stop+0x92>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be0:	e013      	b.n	8001c0a <HAL_TIM_PWM_Stop+0xba>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d104      	bne.n	8001bf2 <HAL_TIM_PWM_Stop+0xa2>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf0:	e00b      	b.n	8001c0a <HAL_TIM_PWM_Stop+0xba>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d104      	bne.n	8001c02 <HAL_TIM_PWM_Stop+0xb2>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c00:	e003      	b.n	8001c0a <HAL_TIM_PWM_Stop+0xba>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40012c00 	.word	0x40012c00

08001c18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e0ac      	b.n	8001d8c <HAL_TIM_PWM_ConfigChannel+0x174>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	f200 809f 	bhi.w	8001d80 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001c42:	a201      	add	r2, pc, #4	; (adr r2, 8001c48 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c48:	08001c7d 	.word	0x08001c7d
 8001c4c:	08001d81 	.word	0x08001d81
 8001c50:	08001d81 	.word	0x08001d81
 8001c54:	08001d81 	.word	0x08001d81
 8001c58:	08001cbd 	.word	0x08001cbd
 8001c5c:	08001d81 	.word	0x08001d81
 8001c60:	08001d81 	.word	0x08001d81
 8001c64:	08001d81 	.word	0x08001d81
 8001c68:	08001cff 	.word	0x08001cff
 8001c6c:	08001d81 	.word	0x08001d81
 8001c70:	08001d81 	.word	0x08001d81
 8001c74:	08001d81 	.word	0x08001d81
 8001c78:	08001d3f 	.word	0x08001d3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f9a0 	bl	8001fc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699a      	ldr	r2, [r3, #24]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0208 	orr.w	r2, r2, #8
 8001c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0204 	bic.w	r2, r2, #4
 8001ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6999      	ldr	r1, [r3, #24]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	619a      	str	r2, [r3, #24]
      break;
 8001cba:	e062      	b.n	8001d82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f9e6 	bl	8002094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699a      	ldr	r2, [r3, #24]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699a      	ldr	r2, [r3, #24]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6999      	ldr	r1, [r3, #24]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	021a      	lsls	r2, r3, #8
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	619a      	str	r2, [r3, #24]
      break;
 8001cfc:	e041      	b.n	8001d82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fa2f 	bl	8002168 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	69da      	ldr	r2, [r3, #28]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0208 	orr.w	r2, r2, #8
 8001d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	69da      	ldr	r2, [r3, #28]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0204 	bic.w	r2, r2, #4
 8001d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	69d9      	ldr	r1, [r3, #28]
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	61da      	str	r2, [r3, #28]
      break;
 8001d3c:	e021      	b.n	8001d82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fa79 	bl	800223c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	69da      	ldr	r2, [r3, #28]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	69da      	ldr	r2, [r3, #28]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	69d9      	ldr	r1, [r3, #28]
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	021a      	lsls	r2, r3, #8
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	61da      	str	r2, [r3, #28]
      break;
 8001d7e:	e000      	b.n	8001d82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001d80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_TIM_ConfigClockSource+0x18>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e0a6      	b.n	8001efa <HAL_TIM_ConfigClockSource+0x166>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001dca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b40      	cmp	r3, #64	; 0x40
 8001de2:	d067      	beq.n	8001eb4 <HAL_TIM_ConfigClockSource+0x120>
 8001de4:	2b40      	cmp	r3, #64	; 0x40
 8001de6:	d80b      	bhi.n	8001e00 <HAL_TIM_ConfigClockSource+0x6c>
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d073      	beq.n	8001ed4 <HAL_TIM_ConfigClockSource+0x140>
 8001dec:	2b10      	cmp	r3, #16
 8001dee:	d802      	bhi.n	8001df6 <HAL_TIM_ConfigClockSource+0x62>
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d06f      	beq.n	8001ed4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001df4:	e078      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d06c      	beq.n	8001ed4 <HAL_TIM_ConfigClockSource+0x140>
 8001dfa:	2b30      	cmp	r3, #48	; 0x30
 8001dfc:	d06a      	beq.n	8001ed4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001dfe:	e073      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001e00:	2b70      	cmp	r3, #112	; 0x70
 8001e02:	d00d      	beq.n	8001e20 <HAL_TIM_ConfigClockSource+0x8c>
 8001e04:	2b70      	cmp	r3, #112	; 0x70
 8001e06:	d804      	bhi.n	8001e12 <HAL_TIM_ConfigClockSource+0x7e>
 8001e08:	2b50      	cmp	r3, #80	; 0x50
 8001e0a:	d033      	beq.n	8001e74 <HAL_TIM_ConfigClockSource+0xe0>
 8001e0c:	2b60      	cmp	r3, #96	; 0x60
 8001e0e:	d041      	beq.n	8001e94 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001e10:	e06a      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e16:	d066      	beq.n	8001ee6 <HAL_TIM_ConfigClockSource+0x152>
 8001e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e1c:	d017      	beq.n	8001e4e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001e1e:	e063      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6899      	ldr	r1, [r3, #8]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f000 fac9 	bl	80023c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e42:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	609a      	str	r2, [r3, #8]
      break;
 8001e4c:	e04c      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	6899      	ldr	r1, [r3, #8]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f000 fab2 	bl	80023c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e70:	609a      	str	r2, [r3, #8]
      break;
 8001e72:	e039      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6859      	ldr	r1, [r3, #4]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	461a      	mov	r2, r3
 8001e82:	f000 fa29 	bl	80022d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2150      	movs	r1, #80	; 0x50
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fa80 	bl	8002392 <TIM_ITRx_SetConfig>
      break;
 8001e92:	e029      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f000 fa47 	bl	8002334 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2160      	movs	r1, #96	; 0x60
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 fa70 	bl	8002392 <TIM_ITRx_SetConfig>
      break;
 8001eb2:	e019      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f000 fa09 	bl	80022d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2140      	movs	r1, #64	; 0x40
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fa60 	bl	8002392 <TIM_ITRx_SetConfig>
      break;
 8001ed2:	e009      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f000 fa57 	bl	8002392 <TIM_ITRx_SetConfig>
        break;
 8001ee4:	e000      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <TIM_Base_SetConfig+0xb8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d00b      	beq.n	8001f34 <TIM_Base_SetConfig+0x30>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f22:	d007      	beq.n	8001f34 <TIM_Base_SetConfig+0x30>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <TIM_Base_SetConfig+0xbc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d003      	beq.n	8001f34 <TIM_Base_SetConfig+0x30>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a25      	ldr	r2, [pc, #148]	; (8001fc4 <TIM_Base_SetConfig+0xc0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d108      	bne.n	8001f46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <TIM_Base_SetConfig+0xb8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00b      	beq.n	8001f66 <TIM_Base_SetConfig+0x62>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d007      	beq.n	8001f66 <TIM_Base_SetConfig+0x62>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a19      	ldr	r2, [pc, #100]	; (8001fc0 <TIM_Base_SetConfig+0xbc>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d003      	beq.n	8001f66 <TIM_Base_SetConfig+0x62>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a18      	ldr	r2, [pc, #96]	; (8001fc4 <TIM_Base_SetConfig+0xc0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d108      	bne.n	8001f78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <TIM_Base_SetConfig+0xb8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d103      	bne.n	8001fac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	615a      	str	r2, [r3, #20]
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	40012c00 	.word	0x40012c00
 8001fc0:	40000400 	.word	0x40000400
 8001fc4:	40000800 	.word	0x40000800

08001fc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	f023 0201 	bic.w	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0303 	bic.w	r3, r3, #3
 8001ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f023 0302 	bic.w	r3, r3, #2
 8002010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <TIM_OC1_SetConfig+0xc8>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d10c      	bne.n	800203e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f023 0308 	bic.w	r3, r3, #8
 800202a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	4313      	orrs	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f023 0304 	bic.w	r3, r3, #4
 800203c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a13      	ldr	r2, [pc, #76]	; (8002090 <TIM_OC1_SetConfig+0xc8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d111      	bne.n	800206a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800204c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	621a      	str	r2, [r3, #32]
}
 8002084:	bf00      	nop
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40012c00 	.word	0x40012c00

08002094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	f023 0210 	bic.w	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f023 0320 	bic.w	r3, r3, #32
 80020de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <TIM_OC2_SetConfig+0xd0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d10d      	bne.n	8002110 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800210e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a14      	ldr	r2, [pc, #80]	; (8002164 <TIM_OC2_SetConfig+0xd0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d113      	bne.n	8002140 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800211e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	621a      	str	r2, [r3, #32]
}
 800215a:	bf00      	nop
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	40012c00 	.word	0x40012c00

08002168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <TIM_OC3_SetConfig+0xd0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d10d      	bne.n	80021e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <TIM_OC3_SetConfig+0xd0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d113      	bne.n	8002212 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	621a      	str	r2, [r3, #32]
}
 800222c:	bf00      	nop
 800222e:	371c      	adds	r7, #28
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40012c00 	.word	0x40012c00

0800223c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800226a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	031b      	lsls	r3, r3, #12
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a0f      	ldr	r2, [pc, #60]	; (80022d4 <TIM_OC4_SetConfig+0x98>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d109      	bne.n	80022b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	019b      	lsls	r3, r3, #6
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	621a      	str	r2, [r3, #32]
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	40012c00 	.word	0x40012c00

080022d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	f023 0201 	bic.w	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f023 030a 	bic.w	r3, r3, #10
 8002314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4313      	orrs	r3, r2
 800231c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	621a      	str	r2, [r3, #32]
}
 800232a:	bf00      	nop
 800232c:	371c      	adds	r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f023 0210 	bic.w	r2, r3, #16
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800235e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	031b      	lsls	r3, r3, #12
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	4313      	orrs	r3, r2
 8002368:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002370:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	621a      	str	r2, [r3, #32]
}
 8002388:	bf00      	nop
 800238a:	371c      	adds	r7, #28
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002392:	b480      	push	{r7}
 8002394:	b085      	sub	sp, #20
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f043 0307 	orr.w	r3, r3, #7
 80023b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	609a      	str	r2, [r3, #8]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b087      	sub	sp, #28
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	021a      	lsls	r2, r3, #8
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	431a      	orrs	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	609a      	str	r2, [r3, #8]
}
 80023fa:	bf00      	nop
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	2201      	movs	r2, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a1a      	ldr	r2, [r3, #32]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	43db      	mvns	r3, r3
 8002426:	401a      	ands	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a1a      	ldr	r2, [r3, #32]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	431a      	orrs	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	621a      	str	r2, [r3, #32]
}
 8002442:	bf00      	nop
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002460:	2302      	movs	r3, #2
 8002462:	e046      	b.n	80024f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a16      	ldr	r2, [pc, #88]	; (80024fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00e      	beq.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b0:	d009      	beq.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a10      	ldr	r2, [pc, #64]	; (8002504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10c      	bne.n	80024e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	40012c00 	.word	0x40012c00
 8002500:	40000400 	.word	0x40000400
 8002504:	40000800 	.word	0x40000800

08002508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e03f      	b.n	800259a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f002 f95e 	bl	80047f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2224      	movs	r2, #36	; 0x24
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800254a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f905 	bl	800275c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b08a      	sub	sp, #40	; 0x28
 80025a6:	af02      	add	r7, sp, #8
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	4613      	mov	r3, r2
 80025b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b20      	cmp	r3, #32
 80025c0:	d17c      	bne.n	80026bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <HAL_UART_Transmit+0x2c>
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e075      	b.n	80026be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_UART_Transmit+0x3e>
 80025dc:	2302      	movs	r3, #2
 80025de:	e06e      	b.n	80026be <HAL_UART_Transmit+0x11c>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2221      	movs	r2, #33	; 0x21
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025f6:	f7fe f9f9 	bl	80009ec <HAL_GetTick>
 80025fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	88fa      	ldrh	r2, [r7, #6]
 8002600:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	88fa      	ldrh	r2, [r7, #6]
 8002606:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002610:	d108      	bne.n	8002624 <HAL_UART_Transmit+0x82>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d104      	bne.n	8002624 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	e003      	b.n	800262c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002634:	e02a      	b.n	800268c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2200      	movs	r2, #0
 800263e:	2180      	movs	r1, #128	; 0x80
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f840 	bl	80026c6 <UART_WaitOnFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e036      	b.n	80026be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10b      	bne.n	800266e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002664:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	3302      	adds	r3, #2
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	e007      	b.n	800267e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	3301      	adds	r3, #1
 800267c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1cf      	bne.n	8002636 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2200      	movs	r2, #0
 800269e:	2140      	movs	r1, #64	; 0x40
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f810 	bl	80026c6 <UART_WaitOnFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e006      	b.n	80026be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	e000      	b.n	80026be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026bc:	2302      	movs	r3, #2
  }
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3720      	adds	r7, #32
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	4613      	mov	r3, r2
 80026d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026d6:	e02c      	b.n	8002732 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026de:	d028      	beq.n	8002732 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80026e6:	f7fe f981 	bl	80009ec <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d21d      	bcs.n	8002732 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002704:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e00f      	b.n	8002752 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4013      	ands	r3, r2
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	429a      	cmp	r2, r3
 8002740:	bf0c      	ite	eq
 8002742:	2301      	moveq	r3, #1
 8002744:	2300      	movne	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	429a      	cmp	r2, r3
 800274e:	d0c3      	beq.n	80026d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002796:	f023 030c 	bic.w	r3, r3, #12
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a2c      	ldr	r2, [pc, #176]	; (8002870 <UART_SetConfig+0x114>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d103      	bne.n	80027cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027c4:	f7fe ffd8 	bl	8001778 <HAL_RCC_GetPCLK2Freq>
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	e002      	b.n	80027d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027cc:	f7fe ffc0 	bl	8001750 <HAL_RCC_GetPCLK1Freq>
 80027d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	009a      	lsls	r2, r3, #2
 80027dc:	441a      	add	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	4a22      	ldr	r2, [pc, #136]	; (8002874 <UART_SetConfig+0x118>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	0119      	lsls	r1, r3, #4
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	009a      	lsls	r2, r3, #2
 80027fc:	441a      	add	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	fbb2 f2f3 	udiv	r2, r2, r3
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <UART_SetConfig+0x118>)
 800280a:	fba3 0302 	umull	r0, r3, r3, r2
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2064      	movs	r0, #100	; 0x64
 8002812:	fb00 f303 	mul.w	r3, r0, r3
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	3332      	adds	r3, #50	; 0x32
 800281c:	4a15      	ldr	r2, [pc, #84]	; (8002874 <UART_SetConfig+0x118>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002828:	4419      	add	r1, r3
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	009a      	lsls	r2, r3, #2
 8002834:	441a      	add	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <UART_SetConfig+0x118>)
 8002842:	fba3 0302 	umull	r0, r3, r3, r2
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2064      	movs	r0, #100	; 0x64
 800284a:	fb00 f303 	mul.w	r3, r0, r3
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	3332      	adds	r3, #50	; 0x32
 8002854:	4a07      	ldr	r2, [pc, #28]	; (8002874 <UART_SetConfig+0x118>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	f003 020f 	and.w	r2, r3, #15
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	440a      	add	r2, r1
 8002866:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40013800 	.word	0x40013800
 8002874:	51eb851f 	.word	0x51eb851f

08002878 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800288a:	2b84      	cmp	r3, #132	; 0x84
 800288c:	d005      	beq.n	800289a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800288e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4413      	add	r3, r2
 8002896:	3303      	adds	r3, #3
 8002898:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800289a:	68fb      	ldr	r3, [r7, #12]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80028aa:	f000 fb8d 	bl	8002fc8 <vTaskStartScheduler>
  
  return osOK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80028b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685c      	ldr	r4, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028ca:	b29e      	uxth	r6, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ffd0 	bl	8002878 <makeFreeRtosPriority>
 80028d8:	4602      	mov	r2, r0
 80028da:	f107 030c 	add.w	r3, r7, #12
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	9200      	str	r2, [sp, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	4632      	mov	r2, r6
 80028e6:	4629      	mov	r1, r5
 80028e8:	4620      	mov	r0, r4
 80028ea:	f000 fa44 	bl	8002d76 <xTaskCreate>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d001      	beq.n	80028f8 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e000      	b.n	80028fa <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80028f8:	68fb      	ldr	r3, [r7, #12]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002902 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8002908:	2018      	movs	r0, #24
 800290a:	f001 f8f7 	bl	8003afc <pvPortMalloc>
 800290e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d007      	beq.n	8002926 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	4618      	mov	r0, r3
 8002922:	f000 f979 	bl	8002c18 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8002926:	687b      	ldr	r3, [r7, #4]
	}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b090      	sub	sp, #64	; 0x40
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8002946:	2300      	movs	r3, #0
 8002948:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	623b      	str	r3, [r7, #32]
 8002962:	e7fe      	b.n	8002962 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <xEventGroupWaitBits+0x52>
 800296e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	e7fe      	b.n	8002980 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <xEventGroupWaitBits+0x6c>
 8002988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	e7fe      	b.n	800299a <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800299c:	f000 fe6c 	bl	8003678 <xTaskGetSchedulerState>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d102      	bne.n	80029ac <xEventGroupWaitBits+0x7c>
 80029a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <xEventGroupWaitBits+0x80>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <xEventGroupWaitBits+0x82>
 80029b0:	2300      	movs	r3, #0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <xEventGroupWaitBits+0x9a>
 80029b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	e7fe      	b.n	80029c8 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 80029ca:	f000 fb43 	bl	8003054 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80029ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029da:	f000 f8fc 	bl	8002bd6 <prvTestWaitCondition>
 80029de:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80029e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00e      	beq.n	8002a04 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d028      	beq.n	8002a46 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80029f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	401a      	ands	r2, r3
 80029fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e020      	b.n	8002a46 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d104      	bne.n	8002a14 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	633b      	str	r3, [r7, #48]	; 0x30
 8002a12:	e018      	b.n	8002a46 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a20:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a2e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a32:	1d18      	adds	r0, r3, #4
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f000 fcc9 	bl	80033d4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8002a46:	f000 fb13 	bl	8003070 <xTaskResumeAll>
 8002a4a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8002a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d031      	beq.n	8002ab6 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d107      	bne.n	8002a68 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <xEventGroupWaitBits+0x190>)
 8002a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8002a68:	f000 fe24 	bl	80036b4 <uxTaskResetEventItemValue>
 8002a6c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d11a      	bne.n	8002aae <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8002a78:	f000 ff86 	bl	8003988 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a88:	f000 f8a5 	bl	8002bd6 <prvTestWaitCondition>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d006      	beq.n	8002aa6 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	401a      	ands	r2, r3
 8002aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8002aaa:	f000 ff9b 	bl	80039e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8002ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3740      	adds	r7, #64	; 0x40
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	e000ed04 	.word	0xe000ed04

08002ac4 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08e      	sub	sp, #56	; 0x38
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <xEventGroupSetBits+0x30>
 8002ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	e7fe      	b.n	8002af2 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <xEventGroupSetBits+0x4e>
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	e7fe      	b.n	8002b10 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b14:	3304      	adds	r3, #4
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	3308      	adds	r3, #8
 8002b1c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8002b1e:	f000 fa99 	bl	8003054 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8002b34:	e03c      	b.n	8002bb0 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8002b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b4c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b54:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d108      	bne.n	8002b72 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00b      	beq.n	8002b84 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b70:	e008      	b.n	8002b84 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d101      	bne.n	8002b84 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8002b80:	2301      	movs	r3, #1
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d010      	beq.n	8002bac <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8002b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ba8:	f000 fc4e 	bl	8003448 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8002bb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d1be      	bne.n	8002b36 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8002bc6:	f000 fa53 	bl	8003070 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	681b      	ldr	r3, [r3, #0]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3738      	adds	r7, #56	; 0x38
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b087      	sub	sp, #28
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d107      	bne.n	8002bfc <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	e007      	b.n	8002c0c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4013      	ands	r3, r2
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d101      	bne.n	8002c0c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8002c0c:	697b      	ldr	r3, [r7, #20]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f103 0208 	add.w	r2, r3, #8
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f103 0208 	add.w	r2, r3, #8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f103 0208 	add.w	r2, r3, #8
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	601a      	str	r2, [r3, #0]
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cca:	d103      	bne.n	8002cd4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	e00c      	b.n	8002cee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3308      	adds	r3, #8
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	e002      	b.n	8002ce2 <vListInsert+0x2e>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d2f6      	bcs.n	8002cdc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	601a      	str	r2, [r3, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6892      	ldr	r2, [r2, #8]
 8002d3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6852      	ldr	r2, [r2, #4]
 8002d44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d103      	bne.n	8002d58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	1e5a      	subs	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b08c      	sub	sp, #48	; 0x30
 8002d7a:	af04      	add	r7, sp, #16
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	603b      	str	r3, [r7, #0]
 8002d82:	4613      	mov	r3, r2
 8002d84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 feb6 	bl	8003afc <pvPortMalloc>
 8002d90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00e      	beq.n	8002db6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002d98:	2054      	movs	r0, #84	; 0x54
 8002d9a:	f000 feaf 	bl	8003afc <pvPortMalloc>
 8002d9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	631a      	str	r2, [r3, #48]	; 0x30
 8002dac:	e005      	b.n	8002dba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002dae:	6978      	ldr	r0, [r7, #20]
 8002db0:	f000 ff66 	bl	8003c80 <vPortFree>
 8002db4:	e001      	b.n	8002dba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d013      	beq.n	8002de8 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dc0:	88fa      	ldrh	r2, [r7, #6]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	9303      	str	r3, [sp, #12]
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	9302      	str	r3, [sp, #8]
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dcc:	9301      	str	r3, [sp, #4]
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f80e 	bl	8002df8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ddc:	69f8      	ldr	r0, [r7, #28]
 8002dde:	f000 f889 	bl	8002ef4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002de2:	2301      	movs	r3, #1
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	e002      	b.n	8002dee <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002dee:	69bb      	ldr	r3, [r7, #24]
	}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e10:	3b01      	subs	r3, #1
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f023 0307 	bic.w	r3, r3, #7
 8002e1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <prvInitialiseNewTask+0x46>
 8002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e7fe      	b.n	8002e3c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	e012      	b.n	8002e6a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	4413      	add	r3, r2
 8002e4a:	7819      	ldrb	r1, [r3, #0]
 8002e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	4413      	add	r3, r2
 8002e52:	3334      	adds	r3, #52	; 0x34
 8002e54:	460a      	mov	r2, r1
 8002e56:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d006      	beq.n	8002e72 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	3301      	adds	r3, #1
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	2b0f      	cmp	r3, #15
 8002e6e:	d9e9      	bls.n	8002e44 <prvInitialiseNewTask+0x4c>
 8002e70:	e000      	b.n	8002e74 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002e72:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	2b13      	cmp	r3, #19
 8002e80:	d901      	bls.n	8002e86 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e82:	2313      	movs	r3, #19
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e90:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	2200      	movs	r2, #0
 8002e96:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff feda 	bl	8002c56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea4:	3318      	adds	r3, #24
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff fed5 	bl	8002c56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	f1c3 0214 	rsb	r2, r3, #20
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	68f9      	ldr	r1, [r7, #12]
 8002ed4:	69b8      	ldr	r0, [r7, #24]
 8002ed6:	f000 fc6b 	bl	80037b0 <pxPortInitialiseStack>
 8002eda:	4602      	mov	r2, r0
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002eec:	bf00      	nop
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002efc:	f000 fd44 	bl	8003988 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f00:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <prvAddNewTaskToReadyList+0xb8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3301      	adds	r3, #1
 8002f06:	4a29      	ldr	r2, [pc, #164]	; (8002fac <prvAddNewTaskToReadyList+0xb8>)
 8002f08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f0a:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <prvAddNewTaskToReadyList+0xbc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f12:	4a27      	ldr	r2, [pc, #156]	; (8002fb0 <prvAddNewTaskToReadyList+0xbc>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f18:	4b24      	ldr	r3, [pc, #144]	; (8002fac <prvAddNewTaskToReadyList+0xb8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d110      	bne.n	8002f42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f20:	f000 fb0a 	bl	8003538 <prvInitialiseTaskLists>
 8002f24:	e00d      	b.n	8002f42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f26:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <prvAddNewTaskToReadyList+0xc0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <prvAddNewTaskToReadyList+0xbc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d802      	bhi.n	8002f42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f3c:	4a1c      	ldr	r2, [pc, #112]	; (8002fb0 <prvAddNewTaskToReadyList+0xbc>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <prvAddNewTaskToReadyList+0xc4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3301      	adds	r3, #1
 8002f48:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <prvAddNewTaskToReadyList+0xc4>)
 8002f4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	2201      	movs	r2, #1
 8002f52:	409a      	lsls	r2, r3
 8002f54:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <prvAddNewTaskToReadyList+0xc8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	4a18      	ldr	r2, [pc, #96]	; (8002fbc <prvAddNewTaskToReadyList+0xc8>)
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <prvAddNewTaskToReadyList+0xcc>)
 8002f6c:	441a      	add	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3304      	adds	r3, #4
 8002f72:	4619      	mov	r1, r3
 8002f74:	4610      	mov	r0, r2
 8002f76:	f7ff fe7a 	bl	8002c6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f7a:	f000 fd33 	bl	80039e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <prvAddNewTaskToReadyList+0xc0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00e      	beq.n	8002fa4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f86:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <prvAddNewTaskToReadyList+0xbc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d207      	bcs.n	8002fa4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <prvAddNewTaskToReadyList+0xd0>)
 8002f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000298 	.word	0x20000298
 8002fb0:	20000094 	.word	0x20000094
 8002fb4:	200002a4 	.word	0x200002a4
 8002fb8:	200002b4 	.word	0x200002b4
 8002fbc:	200002a0 	.word	0x200002a0
 8002fc0:	20000098 	.word	0x20000098
 8002fc4:	e000ed04 	.word	0xe000ed04

08002fc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002fce:	4b1b      	ldr	r3, [pc, #108]	; (800303c <vTaskStartScheduler+0x74>)
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	2280      	movs	r2, #128	; 0x80
 8002fda:	4919      	ldr	r1, [pc, #100]	; (8003040 <vTaskStartScheduler+0x78>)
 8002fdc:	4819      	ldr	r0, [pc, #100]	; (8003044 <vTaskStartScheduler+0x7c>)
 8002fde:	f7ff feca 	bl	8002d76 <xTaskCreate>
 8002fe2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d115      	bne.n	8003016 <vTaskStartScheduler+0x4e>
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <vTaskStartScheduler+0x80>)
 8002ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8003002:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003004:	4b11      	ldr	r3, [pc, #68]	; (800304c <vTaskStartScheduler+0x84>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <vTaskStartScheduler+0x88>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003010:	f000 fc4a 	bl	80038a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003014:	e00d      	b.n	8003032 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d109      	bne.n	8003032 <vTaskStartScheduler+0x6a>
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	e7fe      	b.n	8003030 <vTaskStartScheduler+0x68>
}
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	200002bc 	.word	0x200002bc
 8003040:	08005a5c 	.word	0x08005a5c
 8003044:	08003509 	.word	0x08003509
 8003048:	200002b8 	.word	0x200002b8
 800304c:	200002a4 	.word	0x200002a4
 8003050:	2000029c 	.word	0x2000029c

08003054 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <vTaskSuspendAll+0x18>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	4a03      	ldr	r2, [pc, #12]	; (800306c <vTaskSuspendAll+0x18>)
 8003060:	6013      	str	r3, [r2, #0]
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	200002c0 	.word	0x200002c0

08003070 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800307e:	4b41      	ldr	r3, [pc, #260]	; (8003184 <xTaskResumeAll+0x114>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <xTaskResumeAll+0x2a>
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	e7fe      	b.n	8003098 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800309a:	f000 fc75 	bl	8003988 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800309e:	4b39      	ldr	r3, [pc, #228]	; (8003184 <xTaskResumeAll+0x114>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	4a37      	ldr	r2, [pc, #220]	; (8003184 <xTaskResumeAll+0x114>)
 80030a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030a8:	4b36      	ldr	r3, [pc, #216]	; (8003184 <xTaskResumeAll+0x114>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d161      	bne.n	8003174 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030b0:	4b35      	ldr	r3, [pc, #212]	; (8003188 <xTaskResumeAll+0x118>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d05d      	beq.n	8003174 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030b8:	e02e      	b.n	8003118 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80030ba:	4b34      	ldr	r3, [pc, #208]	; (800318c <xTaskResumeAll+0x11c>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3318      	adds	r3, #24
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fe2c 	bl	8002d24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3304      	adds	r3, #4
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fe27 	bl	8002d24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	2201      	movs	r2, #1
 80030dc:	409a      	lsls	r2, r3
 80030de:	4b2c      	ldr	r3, [pc, #176]	; (8003190 <xTaskResumeAll+0x120>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	4a2a      	ldr	r2, [pc, #168]	; (8003190 <xTaskResumeAll+0x120>)
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4a27      	ldr	r2, [pc, #156]	; (8003194 <xTaskResumeAll+0x124>)
 80030f6:	441a      	add	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3304      	adds	r3, #4
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f7ff fdb5 	bl	8002c6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003108:	4b23      	ldr	r3, [pc, #140]	; (8003198 <xTaskResumeAll+0x128>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	429a      	cmp	r2, r3
 8003110:	d302      	bcc.n	8003118 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003112:	4b22      	ldr	r3, [pc, #136]	; (800319c <xTaskResumeAll+0x12c>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003118:	4b1c      	ldr	r3, [pc, #112]	; (800318c <xTaskResumeAll+0x11c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1cc      	bne.n	80030ba <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003126:	f000 fa83 	bl	8003630 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <xTaskResumeAll+0x130>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d010      	beq.n	8003158 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003136:	f000 f837 	bl	80031a8 <xTaskIncrementTick>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003140:	4b16      	ldr	r3, [pc, #88]	; (800319c <xTaskResumeAll+0x12c>)
 8003142:	2201      	movs	r2, #1
 8003144:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3b01      	subs	r3, #1
 800314a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f1      	bne.n	8003136 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003152:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <xTaskResumeAll+0x130>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003158:	4b10      	ldr	r3, [pc, #64]	; (800319c <xTaskResumeAll+0x12c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d009      	beq.n	8003174 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003160:	2301      	movs	r3, #1
 8003162:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003164:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <xTaskResumeAll+0x134>)
 8003166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003174:	f000 fc36 	bl	80039e4 <vPortExitCritical>

	return xAlreadyYielded;
 8003178:	68bb      	ldr	r3, [r7, #8]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200002c0 	.word	0x200002c0
 8003188:	20000298 	.word	0x20000298
 800318c:	20000258 	.word	0x20000258
 8003190:	200002a0 	.word	0x200002a0
 8003194:	20000098 	.word	0x20000098
 8003198:	20000094 	.word	0x20000094
 800319c:	200002ac 	.word	0x200002ac
 80031a0:	200002a8 	.word	0x200002a8
 80031a4:	e000ed04 	.word	0xe000ed04

080031a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031b2:	4b50      	ldr	r3, [pc, #320]	; (80032f4 <xTaskIncrementTick+0x14c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f040 808c 	bne.w	80032d4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031bc:	4b4e      	ldr	r3, [pc, #312]	; (80032f8 <xTaskIncrementTick+0x150>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3301      	adds	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031c4:	4a4c      	ldr	r2, [pc, #304]	; (80032f8 <xTaskIncrementTick+0x150>)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d11f      	bne.n	8003210 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80031d0:	4b4a      	ldr	r3, [pc, #296]	; (80032fc <xTaskIncrementTick+0x154>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <xTaskIncrementTick+0x46>
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	e7fe      	b.n	80031ec <xTaskIncrementTick+0x44>
 80031ee:	4b43      	ldr	r3, [pc, #268]	; (80032fc <xTaskIncrementTick+0x154>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	4b42      	ldr	r3, [pc, #264]	; (8003300 <xTaskIncrementTick+0x158>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a40      	ldr	r2, [pc, #256]	; (80032fc <xTaskIncrementTick+0x154>)
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4a40      	ldr	r2, [pc, #256]	; (8003300 <xTaskIncrementTick+0x158>)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b40      	ldr	r3, [pc, #256]	; (8003304 <xTaskIncrementTick+0x15c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3301      	adds	r3, #1
 8003208:	4a3e      	ldr	r2, [pc, #248]	; (8003304 <xTaskIncrementTick+0x15c>)
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	f000 fa10 	bl	8003630 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003210:	4b3d      	ldr	r3, [pc, #244]	; (8003308 <xTaskIncrementTick+0x160>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	429a      	cmp	r2, r3
 8003218:	d34d      	bcc.n	80032b6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800321a:	4b38      	ldr	r3, [pc, #224]	; (80032fc <xTaskIncrementTick+0x154>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <xTaskIncrementTick+0x80>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <xTaskIncrementTick+0x82>
 8003228:	2300      	movs	r3, #0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d004      	beq.n	8003238 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800322e:	4b36      	ldr	r3, [pc, #216]	; (8003308 <xTaskIncrementTick+0x160>)
 8003230:	f04f 32ff 	mov.w	r2, #4294967295
 8003234:	601a      	str	r2, [r3, #0]
					break;
 8003236:	e03e      	b.n	80032b6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003238:	4b30      	ldr	r3, [pc, #192]	; (80032fc <xTaskIncrementTick+0x154>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	d203      	bcs.n	8003258 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003250:	4a2d      	ldr	r2, [pc, #180]	; (8003308 <xTaskIncrementTick+0x160>)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6013      	str	r3, [r2, #0]
						break;
 8003256:	e02e      	b.n	80032b6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	3304      	adds	r3, #4
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fd61 	bl	8002d24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	2b00      	cmp	r3, #0
 8003268:	d004      	beq.n	8003274 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	3318      	adds	r3, #24
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fd58 	bl	8002d24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	2201      	movs	r2, #1
 800327a:	409a      	lsls	r2, r3
 800327c:	4b23      	ldr	r3, [pc, #140]	; (800330c <xTaskIncrementTick+0x164>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4313      	orrs	r3, r2
 8003282:	4a22      	ldr	r2, [pc, #136]	; (800330c <xTaskIncrementTick+0x164>)
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4a1f      	ldr	r2, [pc, #124]	; (8003310 <xTaskIncrementTick+0x168>)
 8003294:	441a      	add	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	3304      	adds	r3, #4
 800329a:	4619      	mov	r1, r3
 800329c:	4610      	mov	r0, r2
 800329e:	f7ff fce6 	bl	8002c6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a6:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <xTaskIncrementTick+0x16c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d3b4      	bcc.n	800321a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80032b0:	2301      	movs	r3, #1
 80032b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032b4:	e7b1      	b.n	800321a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032b6:	4b17      	ldr	r3, [pc, #92]	; (8003314 <xTaskIncrementTick+0x16c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032bc:	4914      	ldr	r1, [pc, #80]	; (8003310 <xTaskIncrementTick+0x168>)
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d907      	bls.n	80032de <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80032ce:	2301      	movs	r3, #1
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	e004      	b.n	80032de <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80032d4:	4b10      	ldr	r3, [pc, #64]	; (8003318 <xTaskIncrementTick+0x170>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	4a0f      	ldr	r2, [pc, #60]	; (8003318 <xTaskIncrementTick+0x170>)
 80032dc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80032de:	4b0f      	ldr	r3, [pc, #60]	; (800331c <xTaskIncrementTick+0x174>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80032e6:	2301      	movs	r3, #1
 80032e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80032ea:	697b      	ldr	r3, [r7, #20]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	200002c0 	.word	0x200002c0
 80032f8:	2000029c 	.word	0x2000029c
 80032fc:	20000250 	.word	0x20000250
 8003300:	20000254 	.word	0x20000254
 8003304:	200002b0 	.word	0x200002b0
 8003308:	200002b8 	.word	0x200002b8
 800330c:	200002a0 	.word	0x200002a0
 8003310:	20000098 	.word	0x20000098
 8003314:	20000094 	.word	0x20000094
 8003318:	200002a8 	.word	0x200002a8
 800331c:	200002ac 	.word	0x200002ac

08003320 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003326:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <vTaskSwitchContext+0xa0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800332e:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <vTaskSwitchContext+0xa4>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003334:	e03e      	b.n	80033b4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003336:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <vTaskSwitchContext+0xa4>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800333c:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <vTaskSwitchContext+0xa8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	fab3 f383 	clz	r3, r3
 8003348:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800334a:	7afb      	ldrb	r3, [r7, #11]
 800334c:	f1c3 031f 	rsb	r3, r3, #31
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	491e      	ldr	r1, [pc, #120]	; (80033cc <vTaskSwitchContext+0xac>)
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <vTaskSwitchContext+0x5a>
	__asm volatile
 8003366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	607b      	str	r3, [r7, #4]
 8003378:	e7fe      	b.n	8003378 <vTaskSwitchContext+0x58>
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4a11      	ldr	r2, [pc, #68]	; (80033cc <vTaskSwitchContext+0xac>)
 8003386:	4413      	add	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	3308      	adds	r3, #8
 800339c:	429a      	cmp	r2, r3
 800339e:	d104      	bne.n	80033aa <vTaskSwitchContext+0x8a>
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4a07      	ldr	r2, [pc, #28]	; (80033d0 <vTaskSwitchContext+0xb0>)
 80033b2:	6013      	str	r3, [r2, #0]
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	200002c0 	.word	0x200002c0
 80033c4:	200002ac 	.word	0x200002ac
 80033c8:	200002a0 	.word	0x200002a0
 80033cc:	20000098 	.word	0x20000098
 80033d0:	20000094 	.word	0x20000094

080033d4 <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <vTaskPlaceOnUnorderedEventList+0x26>
 80033e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	e7fe      	b.n	80033f8 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <vTaskPlaceOnUnorderedEventList+0x6c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <vTaskPlaceOnUnorderedEventList+0x42>
 8003402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003406:	f383 8811 	msr	BASEPRI, r3
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	e7fe      	b.n	8003414 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <vTaskPlaceOnUnorderedEventList+0x70>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003420:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003422:	4b08      	ldr	r3, [pc, #32]	; (8003444 <vTaskPlaceOnUnorderedEventList+0x70>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3318      	adds	r3, #24
 8003428:	4619      	mov	r1, r3
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f7ff fc1f 	bl	8002c6e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003430:	2101      	movs	r1, #1
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f956 	bl	80036e4 <prvAddCurrentTaskToDelayedList>
}
 8003438:	bf00      	nop
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	200002c0 	.word	0x200002c0
 8003444:	20000094 	.word	0x20000094

08003448 <vTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8003452:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <vTaskRemoveFromUnorderedEventList+0xac>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <vTaskRemoveFromUnorderedEventList+0x26>
 800345a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	e7fe      	b.n	800346c <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d109      	bne.n	8003498 <vTaskRemoveFromUnorderedEventList+0x50>
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	e7fe      	b.n	8003496 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff fc43 	bl	8002d24 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fc3e 	bl	8002d24 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	2201      	movs	r2, #1
 80034ae:	409a      	lsls	r2, r3
 80034b0:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	4a10      	ldr	r2, [pc, #64]	; (80034f8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <vTaskRemoveFromUnorderedEventList+0xb4>)
 80034c8:	441a      	add	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	3304      	adds	r3, #4
 80034ce:	4619      	mov	r1, r3
 80034d0:	4610      	mov	r0, r2
 80034d2:	f7ff fbcc 	bl	8002c6e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d902      	bls.n	80034ea <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80034e4:	4b07      	ldr	r3, [pc, #28]	; (8003504 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
	}
}
 80034ea:	bf00      	nop
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	200002c0 	.word	0x200002c0
 80034f8:	200002a0 	.word	0x200002a0
 80034fc:	20000098 	.word	0x20000098
 8003500:	20000094 	.word	0x20000094
 8003504:	200002ac 	.word	0x200002ac

08003508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003510:	f000 f852 	bl	80035b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <prvIdleTask+0x28>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d9f9      	bls.n	8003510 <prvIdleTask+0x8>
			{
				taskYIELD();
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <prvIdleTask+0x2c>)
 800351e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800352c:	e7f0      	b.n	8003510 <prvIdleTask+0x8>
 800352e:	bf00      	nop
 8003530:	20000098 	.word	0x20000098
 8003534:	e000ed04 	.word	0xe000ed04

08003538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800353e:	2300      	movs	r3, #0
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	e00c      	b.n	800355e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4a12      	ldr	r2, [pc, #72]	; (8003598 <prvInitialiseTaskLists+0x60>)
 8003550:	4413      	add	r3, r2
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fb60 	bl	8002c18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3301      	adds	r3, #1
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b13      	cmp	r3, #19
 8003562:	d9ef      	bls.n	8003544 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003564:	480d      	ldr	r0, [pc, #52]	; (800359c <prvInitialiseTaskLists+0x64>)
 8003566:	f7ff fb57 	bl	8002c18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800356a:	480d      	ldr	r0, [pc, #52]	; (80035a0 <prvInitialiseTaskLists+0x68>)
 800356c:	f7ff fb54 	bl	8002c18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003570:	480c      	ldr	r0, [pc, #48]	; (80035a4 <prvInitialiseTaskLists+0x6c>)
 8003572:	f7ff fb51 	bl	8002c18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003576:	480c      	ldr	r0, [pc, #48]	; (80035a8 <prvInitialiseTaskLists+0x70>)
 8003578:	f7ff fb4e 	bl	8002c18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800357c:	480b      	ldr	r0, [pc, #44]	; (80035ac <prvInitialiseTaskLists+0x74>)
 800357e:	f7ff fb4b 	bl	8002c18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <prvInitialiseTaskLists+0x78>)
 8003584:	4a05      	ldr	r2, [pc, #20]	; (800359c <prvInitialiseTaskLists+0x64>)
 8003586:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <prvInitialiseTaskLists+0x7c>)
 800358a:	4a05      	ldr	r2, [pc, #20]	; (80035a0 <prvInitialiseTaskLists+0x68>)
 800358c:	601a      	str	r2, [r3, #0]
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000098 	.word	0x20000098
 800359c:	20000228 	.word	0x20000228
 80035a0:	2000023c 	.word	0x2000023c
 80035a4:	20000258 	.word	0x20000258
 80035a8:	2000026c 	.word	0x2000026c
 80035ac:	20000284 	.word	0x20000284
 80035b0:	20000250 	.word	0x20000250
 80035b4:	20000254 	.word	0x20000254

080035b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035be:	e019      	b.n	80035f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80035c0:	f000 f9e2 	bl	8003988 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80035c4:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <prvCheckTasksWaitingTermination+0x4c>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fba7 	bl	8002d24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80035d6:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <prvCheckTasksWaitingTermination+0x50>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3b01      	subs	r3, #1
 80035dc:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <prvCheckTasksWaitingTermination+0x50>)
 80035de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80035e0:	4b0a      	ldr	r3, [pc, #40]	; (800360c <prvCheckTasksWaitingTermination+0x54>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	4a09      	ldr	r2, [pc, #36]	; (800360c <prvCheckTasksWaitingTermination+0x54>)
 80035e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80035ea:	f000 f9fb 	bl	80039e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f80e 	bl	8003610 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <prvCheckTasksWaitingTermination+0x54>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e1      	bne.n	80035c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	2000026c 	.word	0x2000026c
 8003608:	20000298 	.word	0x20000298
 800360c:	20000280 	.word	0x20000280

08003610 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fb2f 	bl	8003c80 <vPortFree>
			vPortFree( pxTCB );
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fb2c 	bl	8003c80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003636:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <prvResetNextTaskUnblockTime+0x40>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <prvResetNextTaskUnblockTime+0x14>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <prvResetNextTaskUnblockTime+0x16>
 8003644:	2300      	movs	r3, #0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d004      	beq.n	8003654 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <prvResetNextTaskUnblockTime+0x44>)
 800364c:	f04f 32ff 	mov.w	r2, #4294967295
 8003650:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003652:	e008      	b.n	8003666 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <prvResetNextTaskUnblockTime+0x40>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4a04      	ldr	r2, [pc, #16]	; (8003674 <prvResetNextTaskUnblockTime+0x44>)
 8003664:	6013      	str	r3, [r2, #0]
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	20000250 	.word	0x20000250
 8003674:	200002b8 	.word	0x200002b8

08003678 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <xTaskGetSchedulerState+0x34>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d102      	bne.n	800368c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003686:	2301      	movs	r3, #1
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	e008      	b.n	800369e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <xTaskGetSchedulerState+0x38>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d102      	bne.n	800369a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003694:	2302      	movs	r3, #2
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	e001      	b.n	800369e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800369a:	2300      	movs	r3, #0
 800369c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800369e:	687b      	ldr	r3, [r7, #4]
	}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	200002a4 	.word	0x200002a4
 80036b0:	200002c0 	.word	0x200002c0

080036b4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <uxTaskResetEventItemValue+0x2c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <uxTaskResetEventItemValue+0x2c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <uxTaskResetEventItemValue+0x2c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f1c2 0214 	rsb	r2, r2, #20
 80036d0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80036d2:	687b      	ldr	r3, [r7, #4]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	20000094 	.word	0x20000094

080036e4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80036ee:	4b29      	ldr	r3, [pc, #164]	; (8003794 <prvAddCurrentTaskToDelayedList+0xb0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036f4:	4b28      	ldr	r3, [pc, #160]	; (8003798 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3304      	adds	r3, #4
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fb12 	bl	8002d24 <uxListRemove>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10b      	bne.n	800371e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003706:	4b24      	ldr	r3, [pc, #144]	; (8003798 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	2201      	movs	r2, #1
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43da      	mvns	r2, r3
 8003714:	4b21      	ldr	r3, [pc, #132]	; (800379c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4013      	ands	r3, r2
 800371a:	4a20      	ldr	r2, [pc, #128]	; (800379c <prvAddCurrentTaskToDelayedList+0xb8>)
 800371c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d10a      	bne.n	800373c <prvAddCurrentTaskToDelayedList+0x58>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800372c:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3304      	adds	r3, #4
 8003732:	4619      	mov	r1, r3
 8003734:	481a      	ldr	r0, [pc, #104]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003736:	f7ff fa9a 	bl	8002c6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800373a:	e026      	b.n	800378a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4413      	add	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	429a      	cmp	r2, r3
 8003752:	d209      	bcs.n	8003768 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003754:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3304      	adds	r3, #4
 800375e:	4619      	mov	r1, r3
 8003760:	4610      	mov	r0, r2
 8003762:	f7ff faa7 	bl	8002cb4 <vListInsert>
}
 8003766:	e010      	b.n	800378a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3304      	adds	r3, #4
 8003772:	4619      	mov	r1, r3
 8003774:	4610      	mov	r0, r2
 8003776:	f7ff fa9d 	bl	8002cb4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800377a:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	429a      	cmp	r2, r3
 8003782:	d202      	bcs.n	800378a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003784:	4a09      	ldr	r2, [pc, #36]	; (80037ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	6013      	str	r3, [r2, #0]
}
 800378a:	bf00      	nop
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	2000029c 	.word	0x2000029c
 8003798:	20000094 	.word	0x20000094
 800379c:	200002a0 	.word	0x200002a0
 80037a0:	20000284 	.word	0x20000284
 80037a4:	20000254 	.word	0x20000254
 80037a8:	20000250 	.word	0x20000250
 80037ac:	200002b8 	.word	0x200002b8

080037b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	3b04      	subs	r3, #4
 80037c0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3b04      	subs	r3, #4
 80037ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f023 0201 	bic.w	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	3b04      	subs	r3, #4
 80037de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80037e0:	4a08      	ldr	r2, [pc, #32]	; (8003804 <pxPortInitialiseStack+0x54>)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	3b14      	subs	r3, #20
 80037ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3b20      	subs	r3, #32
 80037f6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80037f8:	68fb      	ldr	r3, [r7, #12]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	08003809 	.word	0x08003809

08003808 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800380e:	2300      	movs	r3, #0
 8003810:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003812:	4b10      	ldr	r3, [pc, #64]	; (8003854 <prvTaskExitError+0x4c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381a:	d009      	beq.n	8003830 <prvTaskExitError+0x28>
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	e7fe      	b.n	800382e <prvTaskExitError+0x26>
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003842:	bf00      	nop
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0fc      	beq.n	8003844 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800384a:	bf00      	nop
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr
 8003854:	20000008 	.word	0x20000008
	...

08003860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <pxCurrentTCBConst2>)
 8003862:	6819      	ldr	r1, [r3, #0]
 8003864:	6808      	ldr	r0, [r1, #0]
 8003866:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800386a:	f380 8809 	msr	PSP, r0
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f04f 0000 	mov.w	r0, #0
 8003876:	f380 8811 	msr	BASEPRI, r0
 800387a:	f04e 0e0d 	orr.w	lr, lr, #13
 800387e:	4770      	bx	lr

08003880 <pxCurrentTCBConst2>:
 8003880:	20000094 	.word	0x20000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop

08003888 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003888:	4806      	ldr	r0, [pc, #24]	; (80038a4 <prvPortStartFirstTask+0x1c>)
 800388a:	6800      	ldr	r0, [r0, #0]
 800388c:	6800      	ldr	r0, [r0, #0]
 800388e:	f380 8808 	msr	MSP, r0
 8003892:	b662      	cpsie	i
 8003894:	b661      	cpsie	f
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	df00      	svc	0
 80038a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80038a2:	bf00      	nop
 80038a4:	e000ed08 	.word	0xe000ed08

080038a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80038ae:	4b31      	ldr	r3, [pc, #196]	; (8003974 <xPortStartScheduler+0xcc>)
 80038b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	22ff      	movs	r2, #255	; 0xff
 80038be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4b29      	ldr	r3, [pc, #164]	; (8003978 <xPortStartScheduler+0xd0>)
 80038d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80038d6:	4b29      	ldr	r3, [pc, #164]	; (800397c <xPortStartScheduler+0xd4>)
 80038d8:	2207      	movs	r2, #7
 80038da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038dc:	e009      	b.n	80038f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80038de:	4b27      	ldr	r3, [pc, #156]	; (800397c <xPortStartScheduler+0xd4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	4a25      	ldr	r2, [pc, #148]	; (800397c <xPortStartScheduler+0xd4>)
 80038e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038f2:	78fb      	ldrb	r3, [r7, #3]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fa:	2b80      	cmp	r3, #128	; 0x80
 80038fc:	d0ef      	beq.n	80038de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80038fe:	4b1f      	ldr	r3, [pc, #124]	; (800397c <xPortStartScheduler+0xd4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f1c3 0307 	rsb	r3, r3, #7
 8003906:	2b04      	cmp	r3, #4
 8003908:	d009      	beq.n	800391e <xPortStartScheduler+0x76>
 800390a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	e7fe      	b.n	800391c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800391e:	4b17      	ldr	r3, [pc, #92]	; (800397c <xPortStartScheduler+0xd4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	4a15      	ldr	r2, [pc, #84]	; (800397c <xPortStartScheduler+0xd4>)
 8003926:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003928:	4b14      	ldr	r3, [pc, #80]	; (800397c <xPortStartScheduler+0xd4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003930:	4a12      	ldr	r2, [pc, #72]	; (800397c <xPortStartScheduler+0xd4>)
 8003932:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	b2da      	uxtb	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800393c:	4b10      	ldr	r3, [pc, #64]	; (8003980 <xPortStartScheduler+0xd8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0f      	ldr	r2, [pc, #60]	; (8003980 <xPortStartScheduler+0xd8>)
 8003942:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003946:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003948:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <xPortStartScheduler+0xd8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <xPortStartScheduler+0xd8>)
 800394e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003952:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003954:	f000 f8b0 	bl	8003ab8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003958:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <xPortStartScheduler+0xdc>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800395e:	f7ff ff93 	bl	8003888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003962:	f7ff fcdd 	bl	8003320 <vTaskSwitchContext>
	prvTaskExitError();
 8003966:	f7ff ff4f 	bl	8003808 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	e000e400 	.word	0xe000e400
 8003978:	200002c4 	.word	0x200002c4
 800397c:	200002c8 	.word	0x200002c8
 8003980:	e000ed20 	.word	0xe000ed20
 8003984:	20000008 	.word	0x20000008

08003988 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <vPortEnterCritical+0x54>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3301      	adds	r3, #1
 80039a6:	4a0d      	ldr	r2, [pc, #52]	; (80039dc <vPortEnterCritical+0x54>)
 80039a8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <vPortEnterCritical+0x54>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d10e      	bne.n	80039d0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80039b2:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <vPortEnterCritical+0x58>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d009      	beq.n	80039d0 <vPortEnterCritical+0x48>
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	e7fe      	b.n	80039ce <vPortEnterCritical+0x46>
	}
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000008 	.word	0x20000008
 80039e0:	e000ed04 	.word	0xe000ed04

080039e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80039ea:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <vPortExitCritical+0x48>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <vPortExitCritical+0x22>
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	607b      	str	r3, [r7, #4]
 8003a04:	e7fe      	b.n	8003a04 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003a06:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <vPortExitCritical+0x48>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	4a07      	ldr	r2, [pc, #28]	; (8003a2c <vPortExitCritical+0x48>)
 8003a0e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <vPortExitCritical+0x48>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d104      	bne.n	8003a22 <vPortExitCritical+0x3e>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr
 8003a2c:	20000008 	.word	0x20000008

08003a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a30:	f3ef 8009 	mrs	r0, PSP
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <pxCurrentTCBConst>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a40:	6010      	str	r0, [r2, #0]
 8003a42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003a46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a4a:	f380 8811 	msr	BASEPRI, r0
 8003a4e:	f7ff fc67 	bl	8003320 <vTaskSwitchContext>
 8003a52:	f04f 0000 	mov.w	r0, #0
 8003a56:	f380 8811 	msr	BASEPRI, r0
 8003a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003a5e:	6819      	ldr	r1, [r3, #0]
 8003a60:	6808      	ldr	r0, [r1, #0]
 8003a62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a66:	f380 8809 	msr	PSP, r0
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	4770      	bx	lr

08003a70 <pxCurrentTCBConst>:
 8003a70:	20000094 	.word	0x20000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop

08003a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a82:	f383 8811 	msr	BASEPRI, r3
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a90:	f7ff fb8a 	bl	80031a8 <xTaskIncrementTick>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <xPortSysTickHandler+0x3c>)
 8003a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003aac:	bf00      	nop
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	e000ed04 	.word	0xe000ed04

08003ab8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <vPortSetupTimerInterrupt+0x30>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <vPortSetupTimerInterrupt+0x34>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <vPortSetupTimerInterrupt+0x38>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a09      	ldr	r2, [pc, #36]	; (8003af4 <vPortSetupTimerInterrupt+0x3c>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	099b      	lsrs	r3, r3, #6
 8003ad4:	4a08      	ldr	r2, [pc, #32]	; (8003af8 <vPortSetupTimerInterrupt+0x40>)
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ada:	4b03      	ldr	r3, [pc, #12]	; (8003ae8 <vPortSetupTimerInterrupt+0x30>)
 8003adc:	2207      	movs	r2, #7
 8003ade:	601a      	str	r2, [r3, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	e000e010 	.word	0xe000e010
 8003aec:	e000e018 	.word	0xe000e018
 8003af0:	20000010 	.word	0x20000010
 8003af4:	10624dd3 	.word	0x10624dd3
 8003af8:	e000e014 	.word	0xe000e014

08003afc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	; 0x28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b08:	f7ff faa4 	bl	8003054 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b0c:	4b57      	ldr	r3, [pc, #348]	; (8003c6c <pvPortMalloc+0x170>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b14:	f000 f90c 	bl	8003d30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b18:	4b55      	ldr	r3, [pc, #340]	; (8003c70 <pvPortMalloc+0x174>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f040 808c 	bne.w	8003c3e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01c      	beq.n	8003b66 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d013      	beq.n	8003b66 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f023 0307 	bic.w	r3, r3, #7
 8003b44:	3308      	adds	r3, #8
 8003b46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <pvPortMalloc+0x6a>
	__asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	e7fe      	b.n	8003b64 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d068      	beq.n	8003c3e <pvPortMalloc+0x142>
 8003b6c:	4b41      	ldr	r3, [pc, #260]	; (8003c74 <pvPortMalloc+0x178>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d863      	bhi.n	8003c3e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b76:	4b40      	ldr	r3, [pc, #256]	; (8003c78 <pvPortMalloc+0x17c>)
 8003b78:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003b7a:	4b3f      	ldr	r3, [pc, #252]	; (8003c78 <pvPortMalloc+0x17c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b80:	e004      	b.n	8003b8c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d903      	bls.n	8003b9e <pvPortMalloc+0xa2>
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f1      	bne.n	8003b82 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003b9e:	4b33      	ldr	r3, [pc, #204]	; (8003c6c <pvPortMalloc+0x170>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d04a      	beq.n	8003c3e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2208      	movs	r2, #8
 8003bae:	4413      	add	r3, r2
 8003bb0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	1ad2      	subs	r2, r2, r3
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d91e      	bls.n	8003c08 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4413      	add	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d009      	beq.n	8003bf0 <pvPortMalloc+0xf4>
 8003bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	e7fe      	b.n	8003bee <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	1ad2      	subs	r2, r2, r3
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c02:	69b8      	ldr	r0, [r7, #24]
 8003c04:	f000 f8f6 	bl	8003df4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c08:	4b1a      	ldr	r3, [pc, #104]	; (8003c74 <pvPortMalloc+0x178>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <pvPortMalloc+0x178>)
 8003c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c16:	4b17      	ldr	r3, [pc, #92]	; (8003c74 <pvPortMalloc+0x178>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <pvPortMalloc+0x180>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d203      	bcs.n	8003c2a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c22:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <pvPortMalloc+0x178>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a15      	ldr	r2, [pc, #84]	; (8003c7c <pvPortMalloc+0x180>)
 8003c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <pvPortMalloc+0x174>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c3e:	f7ff fa17 	bl	8003070 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d009      	beq.n	8003c60 <pvPortMalloc+0x164>
 8003c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	e7fe      	b.n	8003c5e <pvPortMalloc+0x162>
	return pvReturn;
 8003c60:	69fb      	ldr	r3, [r7, #28]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3728      	adds	r7, #40	; 0x28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000ed4 	.word	0x20000ed4
 8003c70:	20000ee0 	.word	0x20000ee0
 8003c74:	20000ed8 	.word	0x20000ed8
 8003c78:	20000ecc 	.word	0x20000ecc
 8003c7c:	20000edc 	.word	0x20000edc

08003c80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d046      	beq.n	8003d20 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003c92:	2308      	movs	r3, #8
 8003c94:	425b      	negs	r3, r3
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4413      	add	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <vPortFree+0xa8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <vPortFree+0x42>
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	e7fe      	b.n	8003cc0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <vPortFree+0x5e>
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	e7fe      	b.n	8003cdc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <vPortFree+0xa8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d019      	beq.n	8003d20 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d115      	bne.n	8003d20 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <vPortFree+0xa8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	401a      	ands	r2, r3
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d04:	f7ff f9a6 	bl	8003054 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <vPortFree+0xac>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4413      	add	r3, r2
 8003d12:	4a06      	ldr	r2, [pc, #24]	; (8003d2c <vPortFree+0xac>)
 8003d14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d16:	6938      	ldr	r0, [r7, #16]
 8003d18:	f000 f86c 	bl	8003df4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003d1c:	f7ff f9a8 	bl	8003070 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d20:	bf00      	nop
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000ee0 	.word	0x20000ee0
 8003d2c:	20000ed8 	.word	0x20000ed8

08003d30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d3c:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <prvHeapInit+0xac>)
 8003d3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00c      	beq.n	8003d64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3307      	adds	r3, #7
 8003d4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0307 	bic.w	r3, r3, #7
 8003d56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	4a1f      	ldr	r2, [pc, #124]	; (8003ddc <prvHeapInit+0xac>)
 8003d60:	4413      	add	r3, r2
 8003d62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d68:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <prvHeapInit+0xb0>)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d6e:	4b1c      	ldr	r3, [pc, #112]	; (8003de0 <prvHeapInit+0xb0>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	4413      	add	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0307 	bic.w	r3, r3, #7
 8003d8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <prvHeapInit+0xb4>)
 8003d90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003d92:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <prvHeapInit+0xb4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2200      	movs	r2, #0
 8003d98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003d9a:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <prvHeapInit+0xb4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	1ad2      	subs	r2, r2, r3
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <prvHeapInit+0xb4>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4a0a      	ldr	r2, [pc, #40]	; (8003de8 <prvHeapInit+0xb8>)
 8003dbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	4a09      	ldr	r2, [pc, #36]	; (8003dec <prvHeapInit+0xbc>)
 8003dc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003dc8:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <prvHeapInit+0xc0>)
 8003dca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003dce:	601a      	str	r2, [r3, #0]
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	200002cc 	.word	0x200002cc
 8003de0:	20000ecc 	.word	0x20000ecc
 8003de4:	20000ed4 	.word	0x20000ed4
 8003de8:	20000edc 	.word	0x20000edc
 8003dec:	20000ed8 	.word	0x20000ed8
 8003df0:	20000ee0 	.word	0x20000ee0

08003df4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003dfc:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <prvInsertBlockIntoFreeList+0xa8>)
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	e002      	b.n	8003e08 <prvInsertBlockIntoFreeList+0x14>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d8f7      	bhi.n	8003e02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d108      	bne.n	8003e36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	441a      	add	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	441a      	add	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d118      	bne.n	8003e7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4b14      	ldr	r3, [pc, #80]	; (8003ea0 <prvInsertBlockIntoFreeList+0xac>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d00d      	beq.n	8003e72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	441a      	add	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	e008      	b.n	8003e84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <prvInsertBlockIntoFreeList+0xac>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e003      	b.n	8003e84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d002      	beq.n	8003e92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e92:	bf00      	nop
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr
 8003e9c:	20000ecc 	.word	0x20000ecc
 8003ea0:	20000ed4 	.word	0x20000ed4

08003ea4 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 if ( ch == '\n' )
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b0a      	cmp	r3, #10
 8003eb0:	d106      	bne.n	8003ec0 <__io_putchar+0x1c>
	 HAL_UART_Transmit(&huart2, (uint8_t*)&"\r", 1, HAL_MAX_DELAY);
 8003eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	4907      	ldr	r1, [pc, #28]	; (8003ed8 <__io_putchar+0x34>)
 8003eba:	4808      	ldr	r0, [pc, #32]	; (8003edc <__io_putchar+0x38>)
 8003ebc:	f7fe fb71 	bl	80025a2 <HAL_UART_Transmit>
 HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8003ec0:	1d39      	adds	r1, r7, #4
 8003ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	4804      	ldr	r0, [pc, #16]	; (8003edc <__io_putchar+0x38>)
 8003eca:	f7fe fb6a 	bl	80025a2 <HAL_UART_Transmit>
 return ch;
 8003ece:	687b      	ldr	r3, [r7, #4]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	08005a64 	.word	0x08005a64
 8003edc:	20000fd8 	.word	0x20000fd8

08003ee0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003ee0:	b5b0      	push	{r4, r5, r7, lr}
 8003ee2:	b08c      	sub	sp, #48	; 0x30
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	80fb      	strh	r3, [r7, #6]
    // 모든 외부 인터럽트에 대해 모터 상태를 토글
    motor_state++;  // 인터럽트 발생 시 motor_state 값을 증가시켜 토글
 8003eea:	4b30      	ldr	r3, [pc, #192]	; (8003fac <HAL_GPIO_EXTI_Callback+0xcc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	4a2e      	ldr	r2, [pc, #184]	; (8003fac <HAL_GPIO_EXTI_Callback+0xcc>)
 8003ef2:	6013      	str	r3, [r2, #0]

    if (motor_state % 2 == 1) {
 8003ef4:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <HAL_GPIO_EXTI_Callback+0xcc>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	bfb8      	it	lt
 8003f00:	425b      	neglt	r3, r3
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d124      	bne.n	8003f50 <HAL_GPIO_EXTI_Callback+0x70>
        // 모터 정지
        HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); // PWM 멈춤
 8003f06:	2100      	movs	r1, #0
 8003f08:	4829      	ldr	r0, [pc, #164]	; (8003fb0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003f0a:	f7fd fe21 	bl	8001b50 <HAL_TIM_PWM_Stop>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // IN1 LOW
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2102      	movs	r1, #2
 8003f12:	4828      	ldr	r0, [pc, #160]	; (8003fb4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003f14:	f7fd f815 	bl	8000f42 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // IN2 LOW
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2110      	movs	r1, #16
 8003f1c:	4825      	ldr	r0, [pc, #148]	; (8003fb4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003f1e:	f7fd f810 	bl	8000f42 <HAL_GPIO_WritePin>

        // UART로 정지 메시지 전송
        char stop_msg[] = "Motor stopped!\r\n";
 8003f22:	4b25      	ldr	r3, [pc, #148]	; (8003fb8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003f24:	f107 041c 	add.w	r4, r7, #28
 8003f28:	461d      	mov	r5, r3
 8003f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f2e:	682b      	ldr	r3, [r5, #0]
 8003f30:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)stop_msg, strlen(stop_msg), HAL_MAX_DELAY);
 8003f32:	f107 031c 	add.w	r3, r7, #28
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fc f90a 	bl	8000150 <strlen>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	f107 011c 	add.w	r1, r7, #28
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295
 8003f48:	481c      	ldr	r0, [pc, #112]	; (8003fbc <HAL_GPIO_EXTI_Callback+0xdc>)
 8003f4a:	f7fe fb2a 	bl	80025a2 <HAL_UART_Transmit>

        // UART로 재시작 메시지 전송
        char start_msg[] = "Motor started!\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t*)start_msg, strlen(start_msg), HAL_MAX_DELAY);
    }
}
 8003f4e:	e028      	b.n	8003fa2 <HAL_GPIO_EXTI_Callback+0xc2>
        HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // PWM 재시작
 8003f50:	2100      	movs	r1, #0
 8003f52:	4817      	ldr	r0, [pc, #92]	; (8003fb0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003f54:	f7fd fd5a 	bl	8001a0c <HAL_TIM_PWM_Start>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 8003f58:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f60:	635a      	str	r2, [r3, #52]	; 0x34
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // IN1 HIGH
 8003f62:	2201      	movs	r2, #1
 8003f64:	2102      	movs	r1, #2
 8003f66:	4813      	ldr	r0, [pc, #76]	; (8003fb4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003f68:	f7fc ffeb 	bl	8000f42 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // IN2 LOW
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2110      	movs	r1, #16
 8003f70:	4810      	ldr	r0, [pc, #64]	; (8003fb4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003f72:	f7fc ffe6 	bl	8000f42 <HAL_GPIO_WritePin>
        char start_msg[] = "Motor started!\r\n";
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003f78:	f107 0408 	add.w	r4, r7, #8
 8003f7c:	461d      	mov	r5, r3
 8003f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f82:	682b      	ldr	r3, [r5, #0]
 8003f84:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)start_msg, strlen(start_msg), HAL_MAX_DELAY);
 8003f86:	f107 0308 	add.w	r3, r7, #8
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fc f8e0 	bl	8000150 <strlen>
 8003f90:	4603      	mov	r3, r0
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	f107 0108 	add.w	r1, r7, #8
 8003f98:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9c:	4807      	ldr	r0, [pc, #28]	; (8003fbc <HAL_GPIO_EXTI_Callback+0xdc>)
 8003f9e:	f7fe fb00 	bl	80025a2 <HAL_UART_Transmit>
}
 8003fa2:	bf00      	nop
 8003fa4:	3730      	adds	r7, #48	; 0x30
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8003faa:	bf00      	nop
 8003fac:	2000000c 	.word	0x2000000c
 8003fb0:	20000f90 	.word	0x20000f90
 8003fb4:	40010800 	.word	0x40010800
 8003fb8:	08005a68 	.word	0x08005a68
 8003fbc:	20000fd8 	.word	0x20000fd8
 8003fc0:	08005a7c 	.word	0x08005a7c

08003fc4 <delay_us>:


void delay_us(uint32_t us)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim3, 0);  // ???���? 카운?�� 초기?��
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <delay_us+0x34>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Base_Start(&htim3);
 8003fd4:	4808      	ldr	r0, [pc, #32]	; (8003ff8 <delay_us+0x34>)
 8003fd6:	f7fd fc51 	bl	800187c <HAL_TIM_Base_Start>
    while (__HAL_TIM_GET_COUNTER(&htim3) < us); // ?��?��?�� us�? ?�� ?��까�? ??�?
 8003fda:	bf00      	nop
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <delay_us+0x34>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d8f9      	bhi.n	8003fdc <delay_us+0x18>
    HAL_TIM_Base_Stop(&htim3);
 8003fe8:	4803      	ldr	r0, [pc, #12]	; (8003ff8 <delay_us+0x34>)
 8003fea:	f7fd fc91 	bl	8001910 <HAL_TIM_Base_Stop>
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000f44 	.word	0x20000f44
 8003ffc:	00000000 	.word	0x00000000

08004000 <SR04_read>:
void SR04_read(void)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b08b      	sub	sp, #44	; 0x2c
 8004004:	af00      	add	r7, sp, #0
	EventBits_t uxBits;
    HAL_TIM_Base_Start(&htim4);  // Echo 측정?�� ?��?�� ???���? ?��?��
 8004006:	483e      	ldr	r0, [pc, #248]	; (8004100 <SR04_read+0x100>)
 8004008:	f7fd fc38 	bl	800187c <HAL_TIM_Base_Start>
    uint32_t echoStart = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t echoEnd = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	623b      	str	r3, [r7, #32]
    uint32_t distance = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	61fb      	str	r3, [r7, #28]

    // Trigger ?? High ?��?�� 10us ?��?�� ?���?
    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8004018:	2201      	movs	r2, #1
 800401a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800401e:	4839      	ldr	r0, [pc, #228]	; (8004104 <SR04_read+0x104>)
 8004020:	f7fc ff8f 	bl	8000f42 <HAL_GPIO_WritePin>
    delay_us(10);
 8004024:	200a      	movs	r0, #10
 8004026:	f7ff ffcd 	bl	8003fc4 <delay_us>
    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800402a:	2200      	movs	r2, #0
 800402c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004030:	4834      	ldr	r0, [pc, #208]	; (8004104 <SR04_read+0x104>)
 8004032:	f7fc ff86 	bl	8000f42 <HAL_GPIO_WritePin>

    // Echo ?��?�� ??�? (?��?�� ?���? 감�?)
    __HAL_TIM_SET_COUNTER(&htim4, 0);
 8004036:	4b32      	ldr	r3, [pc, #200]	; (8004100 <SR04_read+0x100>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	625a      	str	r2, [r3, #36]	; 0x24
    while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET);
 800403e:	bf00      	nop
 8004040:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004044:	482f      	ldr	r0, [pc, #188]	; (8004104 <SR04_read+0x104>)
 8004046:	f7fc ff65 	bl	8000f14 <HAL_GPIO_ReadPin>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f7      	beq.n	8004040 <SR04_read+0x40>
    echoStart = __HAL_TIM_GET_COUNTER(&htim4);
 8004050:	4b2b      	ldr	r3, [pc, #172]	; (8004100 <SR04_read+0x100>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	627b      	str	r3, [r7, #36]	; 0x24

    // Echo ?��?�� ??�? (?���? ?���? 감�?)
    while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET);
 8004058:	bf00      	nop
 800405a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800405e:	4829      	ldr	r0, [pc, #164]	; (8004104 <SR04_read+0x104>)
 8004060:	f7fc ff58 	bl	8000f14 <HAL_GPIO_ReadPin>
 8004064:	4603      	mov	r3, r0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d0f7      	beq.n	800405a <SR04_read+0x5a>
    echoEnd = __HAL_TIM_GET_COUNTER(&htim4);
 800406a:	4b25      	ldr	r3, [pc, #148]	; (8004100 <SR04_read+0x100>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	623b      	str	r3, [r7, #32]

    // 거리 계산 (초음?�� ?��?�� 34300 cm/s ?��?��)
    distance = (echoEnd - echoStart) * 0.0343 / 2;
 8004072:	6a3a      	ldr	r2, [r7, #32]
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	4618      	mov	r0, r3
 800407a:	f7fc f9b3 	bl	80003e4 <__aeabi_ui2d>
 800407e:	a31e      	add	r3, pc, #120	; (adr r3, 80040f8 <SR04_read+0xf8>)
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f7fc fa28 	bl	80004d8 <__aeabi_dmul>
 8004088:	4603      	mov	r3, r0
 800408a:	460c      	mov	r4, r1
 800408c:	4618      	mov	r0, r3
 800408e:	4621      	mov	r1, r4
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004098:	f7fc fb48 	bl	800072c <__aeabi_ddiv>
 800409c:	4603      	mov	r3, r0
 800409e:	460c      	mov	r4, r1
 80040a0:	4618      	mov	r0, r3
 80040a2:	4621      	mov	r1, r4
 80040a4:	f7fc fc2a 	bl	80008fc <__aeabi_d2uiz>
 80040a8:	4603      	mov	r3, r0
 80040aa:	61fb      	str	r3, [r7, #28]


    // UART 출력
    char msg[20];
    sprintf(msg, "Distance: %lu cm\r\n", distance);
 80040ac:	1d3b      	adds	r3, r7, #4
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	4915      	ldr	r1, [pc, #84]	; (8004108 <SR04_read+0x108>)
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fd6a 	bl	8004b8c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80040b8:	1d3b      	adds	r3, r7, #4
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fc f848 	bl	8000150 <strlen>
 80040c0:	4603      	mov	r3, r0
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	1d39      	adds	r1, r7, #4
 80040c6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ca:	4810      	ldr	r0, [pc, #64]	; (800410c <SR04_read+0x10c>)
 80040cc:	f7fe fa69 	bl	80025a2 <HAL_UART_Transmit>

    HAL_TIM_Base_Stop(&htim4);
 80040d0:	480b      	ldr	r0, [pc, #44]	; (8004100 <SR04_read+0x100>)
 80040d2:	f7fd fc1d 	bl	8001910 <HAL_TIM_Base_Stop>
    if (distance <=7){
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	2b07      	cmp	r3, #7
 80040da:	d806      	bhi.n	80040ea <SR04_read+0xea>
            uxBits = xEventGroupSetBits(group_id, \
 80040dc:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <SR04_read+0x110>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2101      	movs	r1, #1
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe fcee 	bl	8002ac4 <xEventGroupSetBits>
 80040e8:	61b8      	str	r0, [r7, #24]
                    								ENGINE_OIL_PRES_OK);

        }


}
 80040ea:	bf00      	nop
 80040ec:	372c      	adds	r7, #44	; 0x2c
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd90      	pop	{r4, r7, pc}
 80040f2:	bf00      	nop
 80040f4:	f3af 8000 	nop.w
 80040f8:	04816f00 	.word	0x04816f00
 80040fc:	3fa18fc5 	.word	0x3fa18fc5
 8004100:	20000ef8 	.word	0x20000ef8
 8004104:	40010800 	.word	0x40010800
 8004108:	08005a90 	.word	0x08005a90
 800410c:	20000fd8 	.word	0x20000fd8
 8004110:	20000f8c 	.word	0x20000f8c

08004114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004114:	b5b0      	push	{r4, r5, r7, lr}
 8004116:	b08a      	sub	sp, #40	; 0x28
 8004118:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800411a:	f7fc fc0f 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800411e:	f000 f845 	bl	80041ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004122:	f000 f9c1 	bl	80044a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004126:	f000 f995 	bl	8004454 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800412a:	f000 f881 	bl	8004230 <MX_TIM2_Init>
  MX_TIM3_Init();
 800412e:	f000 f8f5 	bl	800431c <MX_TIM3_Init>
  MX_TIM4_Init();
 8004132:	f000 f941 	bl	80043b8 <MX_TIM4_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  group_id = xEventGroupCreate();
 8004136:	f7fe fbe4 	bl	8002902 <xEventGroupCreate>
 800413a:	4602      	mov	r2, r0
 800413c:	4b15      	ldr	r3, [pc, #84]	; (8004194 <main+0x80>)
 800413e:	601a      	str	r2, [r3, #0]
  if (group_id == NULL) printf("xEventGroupCreate error found\n");
 8004140:	4b14      	ldr	r3, [pc, #80]	; (8004194 <main+0x80>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <main+0x3a>
 8004148:	4813      	ldr	r0, [pc, #76]	; (8004198 <main+0x84>)
 800414a:	f000 fd17 	bl	8004b7c <puts>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800414e:	4b13      	ldr	r3, [pc, #76]	; (800419c <main+0x88>)
 8004150:	f107 0414 	add.w	r4, r7, #20
 8004154:	461d      	mov	r5, r3
 8004156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800415a:	682b      	ldr	r3, [r5, #0]
 800415c:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800415e:	f107 0314 	add.w	r3, r7, #20
 8004162:	2100      	movs	r1, #0
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fba5 	bl	80028b4 <osThreadCreate>
 800416a:	4602      	mov	r2, r0
 800416c:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <main+0x8c>)
 800416e:	601a      	str	r2, [r3, #0]

  osThreadDef(MotorTask, StartMotorTask, osPriorityNormal, 0, 128);
 8004170:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <main+0x90>)
 8004172:	463c      	mov	r4, r7
 8004174:	461d      	mov	r5, r3
 8004176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800417a:	682b      	ldr	r3, [r5, #0]
 800417c:	6023      	str	r3, [r4, #0]
  MotorTaskHandle = osThreadCreate(osThread(MotorTask), NULL);
 800417e:	463b      	mov	r3, r7
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe fb96 	bl	80028b4 <osThreadCreate>
 8004188:	4602      	mov	r2, r0
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <main+0x94>)
 800418c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800418e:	f7fe fb8a 	bl	80028a6 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004192:	e7fe      	b.n	8004192 <main+0x7e>
 8004194:	20000f8c 	.word	0x20000f8c
 8004198:	08005aa4 	.word	0x08005aa4
 800419c:	08005ad0 	.word	0x08005ad0
 80041a0:	20000ef4 	.word	0x20000ef4
 80041a4:	08005af0 	.word	0x08005af0
 80041a8:	20000f40 	.word	0x20000f40

080041ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b090      	sub	sp, #64	; 0x40
 80041b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041b2:	f107 0318 	add.w	r3, r7, #24
 80041b6:	2228      	movs	r2, #40	; 0x28
 80041b8:	2100      	movs	r1, #0
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fc79 	bl	8004ab2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041c0:	1d3b      	adds	r3, r7, #4
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	605a      	str	r2, [r3, #4]
 80041c8:	609a      	str	r2, [r3, #8]
 80041ca:	60da      	str	r2, [r3, #12]
 80041cc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80041ce:	2302      	movs	r3, #2
 80041d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80041d2:	2301      	movs	r3, #1
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80041d6:	2310      	movs	r3, #16
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041da:	2302      	movs	r3, #2
 80041dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80041de:	2300      	movs	r3, #0
 80041e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80041e2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80041e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041e8:	f107 0318 	add.w	r3, r7, #24
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fc fed9 	bl	8000fa4 <HAL_RCC_OscConfig>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80041f8:	f000 fa48 	bl	800468c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041fc:	230f      	movs	r3, #15
 80041fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004200:	2302      	movs	r3, #2
 8004202:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800420c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800420e:	2300      	movs	r3, #0
 8004210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004212:	1d3b      	adds	r3, r7, #4
 8004214:	2102      	movs	r1, #2
 8004216:	4618      	mov	r0, r3
 8004218:	f7fd f944 	bl	80014a4 <HAL_RCC_ClockConfig>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8004222:	f000 fa33 	bl	800468c <Error_Handler>
  }
}
 8004226:	bf00      	nop
 8004228:	3740      	adds	r7, #64	; 0x40
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08e      	sub	sp, #56	; 0x38
 8004234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
 8004240:	609a      	str	r2, [r3, #8]
 8004242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004244:	f107 0320 	add.w	r3, r7, #32
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800424e:	1d3b      	adds	r3, r7, #4
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	605a      	str	r2, [r3, #4]
 8004256:	609a      	str	r2, [r3, #8]
 8004258:	60da      	str	r2, [r3, #12]
 800425a:	611a      	str	r2, [r3, #16]
 800425c:	615a      	str	r2, [r3, #20]
 800425e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004260:	4b2d      	ldr	r3, [pc, #180]	; (8004318 <MX_TIM2_Init+0xe8>)
 8004262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004266:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8004268:	4b2b      	ldr	r3, [pc, #172]	; (8004318 <MX_TIM2_Init+0xe8>)
 800426a:	223f      	movs	r2, #63	; 0x3f
 800426c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800426e:	4b2a      	ldr	r3, [pc, #168]	; (8004318 <MX_TIM2_Init+0xe8>)
 8004270:	2200      	movs	r2, #0
 8004272:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8004274:	4b28      	ldr	r3, [pc, #160]	; (8004318 <MX_TIM2_Init+0xe8>)
 8004276:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800427a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800427c:	4b26      	ldr	r3, [pc, #152]	; (8004318 <MX_TIM2_Init+0xe8>)
 800427e:	2200      	movs	r2, #0
 8004280:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004282:	4b25      	ldr	r3, [pc, #148]	; (8004318 <MX_TIM2_Init+0xe8>)
 8004284:	2200      	movs	r2, #0
 8004286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004288:	4823      	ldr	r0, [pc, #140]	; (8004318 <MX_TIM2_Init+0xe8>)
 800428a:	f7fd faa7 	bl	80017dc <HAL_TIM_Base_Init>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004294:	f000 f9fa 	bl	800468c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800429e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042a2:	4619      	mov	r1, r3
 80042a4:	481c      	ldr	r0, [pc, #112]	; (8004318 <MX_TIM2_Init+0xe8>)
 80042a6:	f7fd fd75 	bl	8001d94 <HAL_TIM_ConfigClockSource>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80042b0:	f000 f9ec 	bl	800468c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80042b4:	4818      	ldr	r0, [pc, #96]	; (8004318 <MX_TIM2_Init+0xe8>)
 80042b6:	f7fd fb51 	bl	800195c <HAL_TIM_PWM_Init>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80042c0:	f000 f9e4 	bl	800468c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042c4:	2300      	movs	r3, #0
 80042c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042cc:	f107 0320 	add.w	r3, r7, #32
 80042d0:	4619      	mov	r1, r3
 80042d2:	4811      	ldr	r0, [pc, #68]	; (8004318 <MX_TIM2_Init+0xe8>)
 80042d4:	f7fe f8ba 	bl	800244c <HAL_TIMEx_MasterConfigSynchronization>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80042de:	f000 f9d5 	bl	800468c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042e2:	2360      	movs	r3, #96	; 0x60
 80042e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042f2:	1d3b      	adds	r3, r7, #4
 80042f4:	2200      	movs	r2, #0
 80042f6:	4619      	mov	r1, r3
 80042f8:	4807      	ldr	r0, [pc, #28]	; (8004318 <MX_TIM2_Init+0xe8>)
 80042fa:	f7fd fc8d 	bl	8001c18 <HAL_TIM_PWM_ConfigChannel>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004304:	f000 f9c2 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004308:	4803      	ldr	r0, [pc, #12]	; (8004318 <MX_TIM2_Init+0xe8>)
 800430a:	f000 fa41 	bl	8004790 <HAL_TIM_MspPostInit>

}
 800430e:	bf00      	nop
 8004310:	3738      	adds	r7, #56	; 0x38
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20000f90 	.word	0x20000f90

0800431c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004322:	f107 0308 	add.w	r3, r7, #8
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	605a      	str	r2, [r3, #4]
 800432c:	609a      	str	r2, [r3, #8]
 800432e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004330:	463b      	mov	r3, r7
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004338:	4b1d      	ldr	r3, [pc, #116]	; (80043b0 <MX_TIM3_Init+0x94>)
 800433a:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <MX_TIM3_Init+0x98>)
 800433c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800433e:	4b1c      	ldr	r3, [pc, #112]	; (80043b0 <MX_TIM3_Init+0x94>)
 8004340:	223f      	movs	r2, #63	; 0x3f
 8004342:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004344:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <MX_TIM3_Init+0x94>)
 8004346:	2200      	movs	r2, #0
 8004348:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 800434a:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <MX_TIM3_Init+0x94>)
 800434c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004350:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004352:	4b17      	ldr	r3, [pc, #92]	; (80043b0 <MX_TIM3_Init+0x94>)
 8004354:	2200      	movs	r2, #0
 8004356:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004358:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <MX_TIM3_Init+0x94>)
 800435a:	2200      	movs	r2, #0
 800435c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800435e:	4814      	ldr	r0, [pc, #80]	; (80043b0 <MX_TIM3_Init+0x94>)
 8004360:	f7fd fa3c 	bl	80017dc <HAL_TIM_Base_Init>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800436a:	f000 f98f 	bl	800468c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800436e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004372:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004374:	f107 0308 	add.w	r3, r7, #8
 8004378:	4619      	mov	r1, r3
 800437a:	480d      	ldr	r0, [pc, #52]	; (80043b0 <MX_TIM3_Init+0x94>)
 800437c:	f7fd fd0a 	bl	8001d94 <HAL_TIM_ConfigClockSource>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8004386:	f000 f981 	bl	800468c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800438a:	2300      	movs	r3, #0
 800438c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800438e:	2300      	movs	r3, #0
 8004390:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004392:	463b      	mov	r3, r7
 8004394:	4619      	mov	r1, r3
 8004396:	4806      	ldr	r0, [pc, #24]	; (80043b0 <MX_TIM3_Init+0x94>)
 8004398:	f7fe f858 	bl	800244c <HAL_TIMEx_MasterConfigSynchronization>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80043a2:	f000 f973 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80043a6:	bf00      	nop
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000f44 	.word	0x20000f44
 80043b4:	40000400 	.word	0x40000400

080043b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043be:	f107 0308 	add.w	r3, r7, #8
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	609a      	str	r2, [r3, #8]
 80043ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043cc:	463b      	mov	r3, r7
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80043d4:	4b1d      	ldr	r3, [pc, #116]	; (800444c <MX_TIM4_Init+0x94>)
 80043d6:	4a1e      	ldr	r2, [pc, #120]	; (8004450 <MX_TIM4_Init+0x98>)
 80043d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 80043da:	4b1c      	ldr	r3, [pc, #112]	; (800444c <MX_TIM4_Init+0x94>)
 80043dc:	223f      	movs	r2, #63	; 0x3f
 80043de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043e0:	4b1a      	ldr	r3, [pc, #104]	; (800444c <MX_TIM4_Init+0x94>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80043e6:	4b19      	ldr	r3, [pc, #100]	; (800444c <MX_TIM4_Init+0x94>)
 80043e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80043ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043ee:	4b17      	ldr	r3, [pc, #92]	; (800444c <MX_TIM4_Init+0x94>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043f4:	4b15      	ldr	r3, [pc, #84]	; (800444c <MX_TIM4_Init+0x94>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80043fa:	4814      	ldr	r0, [pc, #80]	; (800444c <MX_TIM4_Init+0x94>)
 80043fc:	f7fd f9ee 	bl	80017dc <HAL_TIM_Base_Init>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004406:	f000 f941 	bl	800468c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800440a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800440e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004410:	f107 0308 	add.w	r3, r7, #8
 8004414:	4619      	mov	r1, r3
 8004416:	480d      	ldr	r0, [pc, #52]	; (800444c <MX_TIM4_Init+0x94>)
 8004418:	f7fd fcbc 	bl	8001d94 <HAL_TIM_ConfigClockSource>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004422:	f000 f933 	bl	800468c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004426:	2300      	movs	r3, #0
 8004428:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800442a:	2300      	movs	r3, #0
 800442c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800442e:	463b      	mov	r3, r7
 8004430:	4619      	mov	r1, r3
 8004432:	4806      	ldr	r0, [pc, #24]	; (800444c <MX_TIM4_Init+0x94>)
 8004434:	f7fe f80a 	bl	800244c <HAL_TIMEx_MasterConfigSynchronization>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800443e:	f000 f925 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004442:	bf00      	nop
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20000ef8 	.word	0x20000ef8
 8004450:	40000800 	.word	0x40000800

08004454 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004458:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <MX_USART2_UART_Init+0x4c>)
 800445a:	4a12      	ldr	r2, [pc, #72]	; (80044a4 <MX_USART2_UART_Init+0x50>)
 800445c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800445e:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <MX_USART2_UART_Init+0x4c>)
 8004460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004464:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004466:	4b0e      	ldr	r3, [pc, #56]	; (80044a0 <MX_USART2_UART_Init+0x4c>)
 8004468:	2200      	movs	r2, #0
 800446a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <MX_USART2_UART_Init+0x4c>)
 800446e:	2200      	movs	r2, #0
 8004470:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004472:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <MX_USART2_UART_Init+0x4c>)
 8004474:	2200      	movs	r2, #0
 8004476:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <MX_USART2_UART_Init+0x4c>)
 800447a:	220c      	movs	r2, #12
 800447c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800447e:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <MX_USART2_UART_Init+0x4c>)
 8004480:	2200      	movs	r2, #0
 8004482:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <MX_USART2_UART_Init+0x4c>)
 8004486:	2200      	movs	r2, #0
 8004488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800448a:	4805      	ldr	r0, [pc, #20]	; (80044a0 <MX_USART2_UART_Init+0x4c>)
 800448c:	f7fe f83c 	bl	8002508 <HAL_UART_Init>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004496:	f000 f8f9 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800449a:	bf00      	nop
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000fd8 	.word	0x20000fd8
 80044a4:	40004400 	.word	0x40004400

080044a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ae:	f107 0310 	add.w	r3, r7, #16
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	605a      	str	r2, [r3, #4]
 80044b8:	609a      	str	r2, [r3, #8]
 80044ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044bc:	4b35      	ldr	r3, [pc, #212]	; (8004594 <MX_GPIO_Init+0xec>)
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	4a34      	ldr	r2, [pc, #208]	; (8004594 <MX_GPIO_Init+0xec>)
 80044c2:	f043 0310 	orr.w	r3, r3, #16
 80044c6:	6193      	str	r3, [r2, #24]
 80044c8:	4b32      	ldr	r3, [pc, #200]	; (8004594 <MX_GPIO_Init+0xec>)
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044d4:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <MX_GPIO_Init+0xec>)
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	4a2e      	ldr	r2, [pc, #184]	; (8004594 <MX_GPIO_Init+0xec>)
 80044da:	f043 0320 	orr.w	r3, r3, #32
 80044de:	6193      	str	r3, [r2, #24]
 80044e0:	4b2c      	ldr	r3, [pc, #176]	; (8004594 <MX_GPIO_Init+0xec>)
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ec:	4b29      	ldr	r3, [pc, #164]	; (8004594 <MX_GPIO_Init+0xec>)
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	4a28      	ldr	r2, [pc, #160]	; (8004594 <MX_GPIO_Init+0xec>)
 80044f2:	f043 0304 	orr.w	r3, r3, #4
 80044f6:	6193      	str	r3, [r2, #24]
 80044f8:	4b26      	ldr	r3, [pc, #152]	; (8004594 <MX_GPIO_Init+0xec>)
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	607b      	str	r3, [r7, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004504:	4b23      	ldr	r3, [pc, #140]	; (8004594 <MX_GPIO_Init+0xec>)
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	4a22      	ldr	r2, [pc, #136]	; (8004594 <MX_GPIO_Init+0xec>)
 800450a:	f043 0308 	orr.w	r3, r3, #8
 800450e:	6193      	str	r3, [r2, #24]
 8004510:	4b20      	ldr	r3, [pc, #128]	; (8004594 <MX_GPIO_Init+0xec>)
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	603b      	str	r3, [r7, #0]
 800451a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|TRIG_Pin, GPIO_PIN_RESET);
 800451c:	2200      	movs	r2, #0
 800451e:	f44f 7199 	mov.w	r1, #306	; 0x132
 8004522:	481d      	ldr	r0, [pc, #116]	; (8004598 <MX_GPIO_Init+0xf0>)
 8004524:	f7fc fd0d 	bl	8000f42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800452c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800452e:	4b1b      	ldr	r3, [pc, #108]	; (800459c <MX_GPIO_Init+0xf4>)
 8004530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004532:	2300      	movs	r3, #0
 8004534:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004536:	f107 0310 	add.w	r3, r7, #16
 800453a:	4619      	mov	r1, r3
 800453c:	4818      	ldr	r0, [pc, #96]	; (80045a0 <MX_GPIO_Init+0xf8>)
 800453e:	f7fc fb8f 	bl	8000c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin TRIG_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|TRIG_Pin;
 8004542:	f44f 7399 	mov.w	r3, #306	; 0x132
 8004546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004548:	2301      	movs	r3, #1
 800454a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454c:	2300      	movs	r3, #0
 800454e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004550:	2302      	movs	r3, #2
 8004552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004554:	f107 0310 	add.w	r3, r7, #16
 8004558:	4619      	mov	r1, r3
 800455a:	480f      	ldr	r0, [pc, #60]	; (8004598 <MX_GPIO_Init+0xf0>)
 800455c:	f7fc fb80 	bl	8000c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8004560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800456e:	f107 0310 	add.w	r3, r7, #16
 8004572:	4619      	mov	r1, r3
 8004574:	4808      	ldr	r0, [pc, #32]	; (8004598 <MX_GPIO_Init+0xf0>)
 8004576:	f7fc fb73 	bl	8000c60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800457a:	2200      	movs	r2, #0
 800457c:	2105      	movs	r1, #5
 800457e:	2028      	movs	r0, #40	; 0x28
 8004580:	f7fc fb37 	bl	8000bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004584:	2028      	movs	r0, #40	; 0x28
 8004586:	f7fc fb50 	bl	8000c2a <HAL_NVIC_EnableIRQ>

}
 800458a:	bf00      	nop
 800458c:	3720      	adds	r7, #32
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
 8004598:	40010800 	.word	0x40010800
 800459c:	10110000 	.word	0x10110000
 80045a0:	40011000 	.word	0x40011000

080045a4 <StartDefaultTask>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	EventBits_t uxBits;


    // 초음파 센서 데이터 읽기 및 처리
    while (1) {
        SR04_read();
 80045ac:	f7ff fd28 	bl	8004000 <SR04_read>



        HAL_Delay(100); // 안정화 딜레이
 80045b0:	2064      	movs	r0, #100	; 0x64
 80045b2:	f7fc fa25 	bl	8000a00 <HAL_Delay>
        SR04_read();
 80045b6:	e7f9      	b.n	80045ac <StartDefaultTask+0x8>

080045b8 <StartMotorTask>:
    }
}

void StartMotorTask(void const * argument) {
 80045b8:	b5b0      	push	{r4, r5, r7, lr}
 80045ba:	b090      	sub	sp, #64	; 0x40
 80045bc:	af02      	add	r7, sp, #8
 80045be:	6078      	str	r0, [r7, #4]
    // 모터 초기화 및 상태 메시지 출력
	EventBits_t uxBits;

	group_id = xEventGroupCreate();
 80045c0:	f7fe f99f 	bl	8002902 <xEventGroupCreate>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4b2a      	ldr	r3, [pc, #168]	; (8004670 <StartMotorTask+0xb8>)
 80045c8:	601a      	str	r2, [r3, #0]
	if (group_id == NULL) printf("xEventGroupCreate error found\n");
 80045ca:	4b29      	ldr	r3, [pc, #164]	; (8004670 <StartMotorTask+0xb8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d102      	bne.n	80045d8 <StartMotorTask+0x20>
 80045d2:	4828      	ldr	r0, [pc, #160]	; (8004674 <StartMotorTask+0xbc>)
 80045d4:	f000 fad2 	bl	8004b7c <puts>


	while (1) {

		uxBits = xEventGroupWaitBits( group_id, \
 80045d8:	4b25      	ldr	r3, [pc, #148]	; (8004670 <StartMotorTask+0xb8>)
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	f04f 33ff 	mov.w	r3, #4294967295
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	2300      	movs	r3, #0
 80045e4:	2201      	movs	r2, #1
 80045e6:	2103      	movs	r1, #3
 80045e8:	f7fe f9a2 	bl	8002930 <xEventGroupWaitBits>
 80045ec:	6378      	str	r0, [r7, #52]	; 0x34
						pdTRUE, \
						pdFALSE, \
						portMAX_DELAY );

		//printf("."); fflush(stdout);
	char msg[] = "Motor Task Started.\r\n";
 80045ee:	4b22      	ldr	r3, [pc, #136]	; (8004678 <StartMotorTask+0xc0>)
 80045f0:	f107 041c 	add.w	r4, r7, #28
 80045f4:	461d      	mov	r5, r3
 80045f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80045fe:	6020      	str	r0, [r4, #0]
 8004600:	3404      	adds	r4, #4
 8004602:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 8004604:	f107 031c 	add.w	r3, r7, #28
 8004608:	4618      	mov	r0, r3
 800460a:	f7fb fda1 	bl	8000150 <strlen>
 800460e:	4603      	mov	r3, r0
 8004610:	b29a      	uxth	r2, r3
 8004612:	f107 011c 	add.w	r1, r7, #28
 8004616:	2364      	movs	r3, #100	; 0x64
 8004618:	4818      	ldr	r0, [pc, #96]	; (800467c <StartMotorTask+0xc4>)
 800461a:	f7fd ffc2 	bl	80025a2 <HAL_UART_Transmit>

    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); // PWM 멈춤
 800461e:	2100      	movs	r1, #0
 8004620:	4817      	ldr	r0, [pc, #92]	; (8004680 <StartMotorTask+0xc8>)
 8004622:	f7fd fa95 	bl	8001b50 <HAL_TIM_PWM_Stop>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // IN1 LOW
 8004626:	2200      	movs	r2, #0
 8004628:	2102      	movs	r1, #2
 800462a:	4816      	ldr	r0, [pc, #88]	; (8004684 <StartMotorTask+0xcc>)
 800462c:	f7fc fc89 	bl	8000f42 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // IN2 LOW
 8004630:	2200      	movs	r2, #0
 8004632:	2110      	movs	r1, #16
 8004634:	4813      	ldr	r0, [pc, #76]	; (8004684 <StartMotorTask+0xcc>)
 8004636:	f7fc fc84 	bl	8000f42 <HAL_GPIO_WritePin>

            // UART로 정지 메시지 전송
            char stop_msg[] = "Motor stopped!\r\n";
 800463a:	4b13      	ldr	r3, [pc, #76]	; (8004688 <StartMotorTask+0xd0>)
 800463c:	f107 0408 	add.w	r4, r7, #8
 8004640:	461d      	mov	r5, r3
 8004642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004646:	682b      	ldr	r3, [r5, #0]
 8004648:	7023      	strb	r3, [r4, #0]
            HAL_UART_Transmit(&huart2, (uint8_t*)stop_msg, strlen(stop_msg), HAL_MAX_DELAY);
 800464a:	f107 0308 	add.w	r3, r7, #8
 800464e:	4618      	mov	r0, r3
 8004650:	f7fb fd7e 	bl	8000150 <strlen>
 8004654:	4603      	mov	r3, r0
 8004656:	b29a      	uxth	r2, r3
 8004658:	f107 0108 	add.w	r1, r7, #8
 800465c:	f04f 33ff 	mov.w	r3, #4294967295
 8004660:	4806      	ldr	r0, [pc, #24]	; (800467c <StartMotorTask+0xc4>)
 8004662:	f7fd ff9e 	bl	80025a2 <HAL_UART_Transmit>





    HAL_Delay(100); // 주기적 모니터링
 8004666:	2064      	movs	r0, #100	; 0x64
 8004668:	f7fc f9ca 	bl	8000a00 <HAL_Delay>
	while (1) {
 800466c:	e7b4      	b.n	80045d8 <StartMotorTask+0x20>
 800466e:	bf00      	nop
 8004670:	20000f8c 	.word	0x20000f8c
 8004674:	08005aa4 	.word	0x08005aa4
 8004678:	08005b04 	.word	0x08005b04
 800467c:	20000fd8 	.word	0x20000fd8
 8004680:	20000f90 	.word	0x20000f90
 8004684:	40010800 	.word	0x40010800
 8004688:	08005a68 	.word	0x08005a68

0800468c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004690:	bf00      	nop
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr

08004698 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800469e:	4b18      	ldr	r3, [pc, #96]	; (8004700 <HAL_MspInit+0x68>)
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	4a17      	ldr	r2, [pc, #92]	; (8004700 <HAL_MspInit+0x68>)
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	6193      	str	r3, [r2, #24]
 80046aa:	4b15      	ldr	r3, [pc, #84]	; (8004700 <HAL_MspInit+0x68>)
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <HAL_MspInit+0x68>)
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	4a11      	ldr	r2, [pc, #68]	; (8004700 <HAL_MspInit+0x68>)
 80046bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c0:	61d3      	str	r3, [r2, #28]
 80046c2:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <HAL_MspInit+0x68>)
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ca:	607b      	str	r3, [r7, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80046ce:	2200      	movs	r2, #0
 80046d0:	210f      	movs	r1, #15
 80046d2:	f06f 0001 	mvn.w	r0, #1
 80046d6:	f7fc fa8c 	bl	8000bf2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80046da:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <HAL_MspInit+0x6c>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	4a04      	ldr	r2, [pc, #16]	; (8004704 <HAL_MspInit+0x6c>)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000
 8004704:	40010000 	.word	0x40010000

08004708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004718:	d10c      	bne.n	8004734 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800471a:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <HAL_TIM_Base_MspInit+0x7c>)
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	4a19      	ldr	r2, [pc, #100]	; (8004784 <HAL_TIM_Base_MspInit+0x7c>)
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	61d3      	str	r3, [r2, #28]
 8004726:	4b17      	ldr	r3, [pc, #92]	; (8004784 <HAL_TIM_Base_MspInit+0x7c>)
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004732:	e022      	b.n	800477a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a13      	ldr	r2, [pc, #76]	; (8004788 <HAL_TIM_Base_MspInit+0x80>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d10c      	bne.n	8004758 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800473e:	4b11      	ldr	r3, [pc, #68]	; (8004784 <HAL_TIM_Base_MspInit+0x7c>)
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	4a10      	ldr	r2, [pc, #64]	; (8004784 <HAL_TIM_Base_MspInit+0x7c>)
 8004744:	f043 0302 	orr.w	r3, r3, #2
 8004748:	61d3      	str	r3, [r2, #28]
 800474a:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <HAL_TIM_Base_MspInit+0x7c>)
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	693b      	ldr	r3, [r7, #16]
}
 8004756:	e010      	b.n	800477a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a0b      	ldr	r2, [pc, #44]	; (800478c <HAL_TIM_Base_MspInit+0x84>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d10b      	bne.n	800477a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004762:	4b08      	ldr	r3, [pc, #32]	; (8004784 <HAL_TIM_Base_MspInit+0x7c>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	4a07      	ldr	r2, [pc, #28]	; (8004784 <HAL_TIM_Base_MspInit+0x7c>)
 8004768:	f043 0304 	orr.w	r3, r3, #4
 800476c:	61d3      	str	r3, [r2, #28]
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_TIM_Base_MspInit+0x7c>)
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr
 8004784:	40021000 	.word	0x40021000
 8004788:	40000400 	.word	0x40000400
 800478c:	40000800 	.word	0x40000800

08004790 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004798:	f107 0310 	add.w	r3, r7, #16
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	605a      	str	r2, [r3, #4]
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ae:	d117      	bne.n	80047e0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b0:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <HAL_TIM_MspPostInit+0x58>)
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	4a0c      	ldr	r2, [pc, #48]	; (80047e8 <HAL_TIM_MspPostInit+0x58>)
 80047b6:	f043 0304 	orr.w	r3, r3, #4
 80047ba:	6193      	str	r3, [r2, #24]
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <HAL_TIM_MspPostInit+0x58>)
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80047c8:	2301      	movs	r3, #1
 80047ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047cc:	2302      	movs	r3, #2
 80047ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d0:	2302      	movs	r3, #2
 80047d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d4:	f107 0310 	add.w	r3, r7, #16
 80047d8:	4619      	mov	r1, r3
 80047da:	4804      	ldr	r0, [pc, #16]	; (80047ec <HAL_TIM_MspPostInit+0x5c>)
 80047dc:	f7fc fa40 	bl	8000c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80047e0:	bf00      	nop
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40021000 	.word	0x40021000
 80047ec:	40010800 	.word	0x40010800

080047f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f8:	f107 0310 	add.w	r3, r7, #16
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	609a      	str	r2, [r3, #8]
 8004804:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a15      	ldr	r2, [pc, #84]	; (8004860 <HAL_UART_MspInit+0x70>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d123      	bne.n	8004858 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004810:	4b14      	ldr	r3, [pc, #80]	; (8004864 <HAL_UART_MspInit+0x74>)
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	4a13      	ldr	r2, [pc, #76]	; (8004864 <HAL_UART_MspInit+0x74>)
 8004816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800481a:	61d3      	str	r3, [r2, #28]
 800481c:	4b11      	ldr	r3, [pc, #68]	; (8004864 <HAL_UART_MspInit+0x74>)
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004828:	4b0e      	ldr	r3, [pc, #56]	; (8004864 <HAL_UART_MspInit+0x74>)
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	4a0d      	ldr	r2, [pc, #52]	; (8004864 <HAL_UART_MspInit+0x74>)
 800482e:	f043 0304 	orr.w	r3, r3, #4
 8004832:	6193      	str	r3, [r2, #24]
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_UART_MspInit+0x74>)
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004840:	230c      	movs	r3, #12
 8004842:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004844:	2302      	movs	r3, #2
 8004846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004848:	2302      	movs	r3, #2
 800484a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800484c:	f107 0310 	add.w	r3, r7, #16
 8004850:	4619      	mov	r1, r3
 8004852:	4805      	ldr	r0, [pc, #20]	; (8004868 <HAL_UART_MspInit+0x78>)
 8004854:	f7fc fa04 	bl	8000c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004858:	bf00      	nop
 800485a:	3720      	adds	r7, #32
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40004400 	.word	0x40004400
 8004864:	40021000 	.word	0x40021000
 8004868:	40010800 	.word	0x40010800

0800486c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004870:	bf00      	nop
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800487c:	e7fe      	b.n	800487c <HardFault_Handler+0x4>

0800487e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800487e:	b480      	push	{r7}
 8004880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004882:	e7fe      	b.n	8004882 <MemManage_Handler+0x4>

08004884 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004888:	e7fe      	b.n	8004888 <BusFault_Handler+0x4>

0800488a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800488a:	b480      	push	{r7}
 800488c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800488e:	e7fe      	b.n	800488e <UsageFault_Handler+0x4>

08004890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048a0:	f7fc f892 	bl	80009c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80048a4:	f7fe fee8 	bl	8003678 <xTaskGetSchedulerState>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d001      	beq.n	80048b2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80048ae:	f7ff f8e3 	bl	8003a78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80048ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80048be:	f7fc fb59 	bl	8000f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b086      	sub	sp, #24
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	e00a      	b.n	80048ee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80048d8:	f3af 8000 	nop.w
 80048dc:	4601      	mov	r1, r0
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	60ba      	str	r2, [r7, #8]
 80048e4:	b2ca      	uxtb	r2, r1
 80048e6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	3301      	adds	r3, #1
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	dbf0      	blt.n	80048d8 <_read+0x12>
	}

return len;
 80048f6:	687b      	ldr	r3, [r7, #4]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	e009      	b.n	8004926 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	60ba      	str	r2, [r7, #8]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff fac2 	bl	8003ea4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	3301      	adds	r3, #1
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	429a      	cmp	r2, r3
 800492c:	dbf1      	blt.n	8004912 <_write+0x12>
	}
	return len;
 800492e:	687b      	ldr	r3, [r7, #4]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <_close>:

int _close(int file)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	return -1;
 8004940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr

0800494e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800495e:	605a      	str	r2, [r3, #4]
	return 0;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <_isatty>:

int _isatty(int file)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
	return 1;
 8004974:	2301      	movs	r3, #1
}
 8004976:	4618      	mov	r0, r3
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr

08004980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
	return 0;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr

08004998 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80049a0:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <_sbrk+0x50>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d102      	bne.n	80049ae <_sbrk+0x16>
		heap_end = &end;
 80049a8:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <_sbrk+0x50>)
 80049aa:	4a10      	ldr	r2, [pc, #64]	; (80049ec <_sbrk+0x54>)
 80049ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80049ae:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <_sbrk+0x50>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80049b4:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <_sbrk+0x50>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4413      	add	r3, r2
 80049bc:	466a      	mov	r2, sp
 80049be:	4293      	cmp	r3, r2
 80049c0:	d907      	bls.n	80049d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80049c2:	f000 f841 	bl	8004a48 <__errno>
 80049c6:	4602      	mov	r2, r0
 80049c8:	230c      	movs	r3, #12
 80049ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80049cc:	f04f 33ff 	mov.w	r3, #4294967295
 80049d0:	e006      	b.n	80049e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80049d2:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <_sbrk+0x50>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4413      	add	r3, r2
 80049da:	4a03      	ldr	r2, [pc, #12]	; (80049e8 <_sbrk+0x50>)
 80049dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80049de:	68fb      	ldr	r3, [r7, #12]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000ee4 	.word	0x20000ee4
 80049ec:	20001020 	.word	0x20001020

080049f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr

080049fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049fc:	480c      	ldr	r0, [pc, #48]	; (8004a30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049fe:	490d      	ldr	r1, [pc, #52]	; (8004a34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a00:	4a0d      	ldr	r2, [pc, #52]	; (8004a38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a04:	e002      	b.n	8004a0c <LoopCopyDataInit>

08004a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a0a:	3304      	adds	r3, #4

08004a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a10:	d3f9      	bcc.n	8004a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a12:	4a0a      	ldr	r2, [pc, #40]	; (8004a3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a14:	4c0a      	ldr	r4, [pc, #40]	; (8004a40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a18:	e001      	b.n	8004a1e <LoopFillZerobss>

08004a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a1c:	3204      	adds	r2, #4

08004a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a20:	d3fb      	bcc.n	8004a1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a22:	f7ff ffe5 	bl	80049f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a26:	f000 f815 	bl	8004a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004a2a:	f7ff fb73 	bl	8004114 <main>
  bx lr
 8004a2e:	4770      	bx	lr
  ldr r0, =_sdata
 8004a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a34:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004a38:	08005bd4 	.word	0x08005bd4
  ldr r2, =_sbss
 8004a3c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004a40:	20001020 	.word	0x20001020

08004a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a44:	e7fe      	b.n	8004a44 <ADC1_2_IRQHandler>
	...

08004a48 <__errno>:
 8004a48:	4b01      	ldr	r3, [pc, #4]	; (8004a50 <__errno+0x8>)
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000014 	.word	0x20000014

08004a54 <__libc_init_array>:
 8004a54:	b570      	push	{r4, r5, r6, lr}
 8004a56:	2500      	movs	r5, #0
 8004a58:	4e0c      	ldr	r6, [pc, #48]	; (8004a8c <__libc_init_array+0x38>)
 8004a5a:	4c0d      	ldr	r4, [pc, #52]	; (8004a90 <__libc_init_array+0x3c>)
 8004a5c:	1ba4      	subs	r4, r4, r6
 8004a5e:	10a4      	asrs	r4, r4, #2
 8004a60:	42a5      	cmp	r5, r4
 8004a62:	d109      	bne.n	8004a78 <__libc_init_array+0x24>
 8004a64:	f000 ffe4 	bl	8005a30 <_init>
 8004a68:	2500      	movs	r5, #0
 8004a6a:	4e0a      	ldr	r6, [pc, #40]	; (8004a94 <__libc_init_array+0x40>)
 8004a6c:	4c0a      	ldr	r4, [pc, #40]	; (8004a98 <__libc_init_array+0x44>)
 8004a6e:	1ba4      	subs	r4, r4, r6
 8004a70:	10a4      	asrs	r4, r4, #2
 8004a72:	42a5      	cmp	r5, r4
 8004a74:	d105      	bne.n	8004a82 <__libc_init_array+0x2e>
 8004a76:	bd70      	pop	{r4, r5, r6, pc}
 8004a78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a7c:	4798      	blx	r3
 8004a7e:	3501      	adds	r5, #1
 8004a80:	e7ee      	b.n	8004a60 <__libc_init_array+0xc>
 8004a82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a86:	4798      	blx	r3
 8004a88:	3501      	adds	r5, #1
 8004a8a:	e7f2      	b.n	8004a72 <__libc_init_array+0x1e>
 8004a8c:	08005bcc 	.word	0x08005bcc
 8004a90:	08005bcc 	.word	0x08005bcc
 8004a94:	08005bcc 	.word	0x08005bcc
 8004a98:	08005bd0 	.word	0x08005bd0

08004a9c <memcpy>:
 8004a9c:	b510      	push	{r4, lr}
 8004a9e:	1e43      	subs	r3, r0, #1
 8004aa0:	440a      	add	r2, r1
 8004aa2:	4291      	cmp	r1, r2
 8004aa4:	d100      	bne.n	8004aa8 <memcpy+0xc>
 8004aa6:	bd10      	pop	{r4, pc}
 8004aa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ab0:	e7f7      	b.n	8004aa2 <memcpy+0x6>

08004ab2 <memset>:
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4402      	add	r2, r0
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d100      	bne.n	8004abc <memset+0xa>
 8004aba:	4770      	bx	lr
 8004abc:	f803 1b01 	strb.w	r1, [r3], #1
 8004ac0:	e7f9      	b.n	8004ab6 <memset+0x4>
	...

08004ac4 <_puts_r>:
 8004ac4:	b570      	push	{r4, r5, r6, lr}
 8004ac6:	460e      	mov	r6, r1
 8004ac8:	4605      	mov	r5, r0
 8004aca:	b118      	cbz	r0, 8004ad4 <_puts_r+0x10>
 8004acc:	6983      	ldr	r3, [r0, #24]
 8004ace:	b90b      	cbnz	r3, 8004ad4 <_puts_r+0x10>
 8004ad0:	f000 fa2c 	bl	8004f2c <__sinit>
 8004ad4:	69ab      	ldr	r3, [r5, #24]
 8004ad6:	68ac      	ldr	r4, [r5, #8]
 8004ad8:	b913      	cbnz	r3, 8004ae0 <_puts_r+0x1c>
 8004ada:	4628      	mov	r0, r5
 8004adc:	f000 fa26 	bl	8004f2c <__sinit>
 8004ae0:	4b23      	ldr	r3, [pc, #140]	; (8004b70 <_puts_r+0xac>)
 8004ae2:	429c      	cmp	r4, r3
 8004ae4:	d117      	bne.n	8004b16 <_puts_r+0x52>
 8004ae6:	686c      	ldr	r4, [r5, #4]
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	071b      	lsls	r3, r3, #28
 8004aec:	d51d      	bpl.n	8004b2a <_puts_r+0x66>
 8004aee:	6923      	ldr	r3, [r4, #16]
 8004af0:	b1db      	cbz	r3, 8004b2a <_puts_r+0x66>
 8004af2:	3e01      	subs	r6, #1
 8004af4:	68a3      	ldr	r3, [r4, #8]
 8004af6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004afa:	3b01      	subs	r3, #1
 8004afc:	60a3      	str	r3, [r4, #8]
 8004afe:	b9e9      	cbnz	r1, 8004b3c <_puts_r+0x78>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	da2e      	bge.n	8004b62 <_puts_r+0x9e>
 8004b04:	4622      	mov	r2, r4
 8004b06:	210a      	movs	r1, #10
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f000 f85f 	bl	8004bcc <__swbuf_r>
 8004b0e:	3001      	adds	r0, #1
 8004b10:	d011      	beq.n	8004b36 <_puts_r+0x72>
 8004b12:	200a      	movs	r0, #10
 8004b14:	e011      	b.n	8004b3a <_puts_r+0x76>
 8004b16:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <_puts_r+0xb0>)
 8004b18:	429c      	cmp	r4, r3
 8004b1a:	d101      	bne.n	8004b20 <_puts_r+0x5c>
 8004b1c:	68ac      	ldr	r4, [r5, #8]
 8004b1e:	e7e3      	b.n	8004ae8 <_puts_r+0x24>
 8004b20:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <_puts_r+0xb4>)
 8004b22:	429c      	cmp	r4, r3
 8004b24:	bf08      	it	eq
 8004b26:	68ec      	ldreq	r4, [r5, #12]
 8004b28:	e7de      	b.n	8004ae8 <_puts_r+0x24>
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f000 f89f 	bl	8004c70 <__swsetup_r>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d0dd      	beq.n	8004af2 <_puts_r+0x2e>
 8004b36:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	da04      	bge.n	8004b4a <_puts_r+0x86>
 8004b40:	69a2      	ldr	r2, [r4, #24]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	dc06      	bgt.n	8004b54 <_puts_r+0x90>
 8004b46:	290a      	cmp	r1, #10
 8004b48:	d004      	beq.n	8004b54 <_puts_r+0x90>
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	6022      	str	r2, [r4, #0]
 8004b50:	7019      	strb	r1, [r3, #0]
 8004b52:	e7cf      	b.n	8004af4 <_puts_r+0x30>
 8004b54:	4622      	mov	r2, r4
 8004b56:	4628      	mov	r0, r5
 8004b58:	f000 f838 	bl	8004bcc <__swbuf_r>
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d1c9      	bne.n	8004af4 <_puts_r+0x30>
 8004b60:	e7e9      	b.n	8004b36 <_puts_r+0x72>
 8004b62:	200a      	movs	r0, #10
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	6022      	str	r2, [r4, #0]
 8004b6a:	7018      	strb	r0, [r3, #0]
 8004b6c:	e7e5      	b.n	8004b3a <_puts_r+0x76>
 8004b6e:	bf00      	nop
 8004b70:	08005b58 	.word	0x08005b58
 8004b74:	08005b78 	.word	0x08005b78
 8004b78:	08005b38 	.word	0x08005b38

08004b7c <puts>:
 8004b7c:	4b02      	ldr	r3, [pc, #8]	; (8004b88 <puts+0xc>)
 8004b7e:	4601      	mov	r1, r0
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	f7ff bf9f 	b.w	8004ac4 <_puts_r>
 8004b86:	bf00      	nop
 8004b88:	20000014 	.word	0x20000014

08004b8c <siprintf>:
 8004b8c:	b40e      	push	{r1, r2, r3}
 8004b8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b92:	b500      	push	{lr}
 8004b94:	b09c      	sub	sp, #112	; 0x70
 8004b96:	ab1d      	add	r3, sp, #116	; 0x74
 8004b98:	9002      	str	r0, [sp, #8]
 8004b9a:	9006      	str	r0, [sp, #24]
 8004b9c:	9107      	str	r1, [sp, #28]
 8004b9e:	9104      	str	r1, [sp, #16]
 8004ba0:	4808      	ldr	r0, [pc, #32]	; (8004bc4 <siprintf+0x38>)
 8004ba2:	4909      	ldr	r1, [pc, #36]	; (8004bc8 <siprintf+0x3c>)
 8004ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ba8:	9105      	str	r1, [sp, #20]
 8004baa:	6800      	ldr	r0, [r0, #0]
 8004bac:	a902      	add	r1, sp, #8
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	f000 fbaa 	bl	8005308 <_svfiprintf_r>
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	9b02      	ldr	r3, [sp, #8]
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	b01c      	add	sp, #112	; 0x70
 8004bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bc0:	b003      	add	sp, #12
 8004bc2:	4770      	bx	lr
 8004bc4:	20000014 	.word	0x20000014
 8004bc8:	ffff0208 	.word	0xffff0208

08004bcc <__swbuf_r>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	460e      	mov	r6, r1
 8004bd0:	4614      	mov	r4, r2
 8004bd2:	4605      	mov	r5, r0
 8004bd4:	b118      	cbz	r0, 8004bde <__swbuf_r+0x12>
 8004bd6:	6983      	ldr	r3, [r0, #24]
 8004bd8:	b90b      	cbnz	r3, 8004bde <__swbuf_r+0x12>
 8004bda:	f000 f9a7 	bl	8004f2c <__sinit>
 8004bde:	4b21      	ldr	r3, [pc, #132]	; (8004c64 <__swbuf_r+0x98>)
 8004be0:	429c      	cmp	r4, r3
 8004be2:	d12a      	bne.n	8004c3a <__swbuf_r+0x6e>
 8004be4:	686c      	ldr	r4, [r5, #4]
 8004be6:	69a3      	ldr	r3, [r4, #24]
 8004be8:	60a3      	str	r3, [r4, #8]
 8004bea:	89a3      	ldrh	r3, [r4, #12]
 8004bec:	071a      	lsls	r2, r3, #28
 8004bee:	d52e      	bpl.n	8004c4e <__swbuf_r+0x82>
 8004bf0:	6923      	ldr	r3, [r4, #16]
 8004bf2:	b363      	cbz	r3, 8004c4e <__swbuf_r+0x82>
 8004bf4:	6923      	ldr	r3, [r4, #16]
 8004bf6:	6820      	ldr	r0, [r4, #0]
 8004bf8:	b2f6      	uxtb	r6, r6
 8004bfa:	1ac0      	subs	r0, r0, r3
 8004bfc:	6963      	ldr	r3, [r4, #20]
 8004bfe:	4637      	mov	r7, r6
 8004c00:	4283      	cmp	r3, r0
 8004c02:	dc04      	bgt.n	8004c0e <__swbuf_r+0x42>
 8004c04:	4621      	mov	r1, r4
 8004c06:	4628      	mov	r0, r5
 8004c08:	f000 f926 	bl	8004e58 <_fflush_r>
 8004c0c:	bb28      	cbnz	r0, 8004c5a <__swbuf_r+0x8e>
 8004c0e:	68a3      	ldr	r3, [r4, #8]
 8004c10:	3001      	adds	r0, #1
 8004c12:	3b01      	subs	r3, #1
 8004c14:	60a3      	str	r3, [r4, #8]
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	6022      	str	r2, [r4, #0]
 8004c1c:	701e      	strb	r6, [r3, #0]
 8004c1e:	6963      	ldr	r3, [r4, #20]
 8004c20:	4283      	cmp	r3, r0
 8004c22:	d004      	beq.n	8004c2e <__swbuf_r+0x62>
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	07db      	lsls	r3, r3, #31
 8004c28:	d519      	bpl.n	8004c5e <__swbuf_r+0x92>
 8004c2a:	2e0a      	cmp	r6, #10
 8004c2c:	d117      	bne.n	8004c5e <__swbuf_r+0x92>
 8004c2e:	4621      	mov	r1, r4
 8004c30:	4628      	mov	r0, r5
 8004c32:	f000 f911 	bl	8004e58 <_fflush_r>
 8004c36:	b190      	cbz	r0, 8004c5e <__swbuf_r+0x92>
 8004c38:	e00f      	b.n	8004c5a <__swbuf_r+0x8e>
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <__swbuf_r+0x9c>)
 8004c3c:	429c      	cmp	r4, r3
 8004c3e:	d101      	bne.n	8004c44 <__swbuf_r+0x78>
 8004c40:	68ac      	ldr	r4, [r5, #8]
 8004c42:	e7d0      	b.n	8004be6 <__swbuf_r+0x1a>
 8004c44:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <__swbuf_r+0xa0>)
 8004c46:	429c      	cmp	r4, r3
 8004c48:	bf08      	it	eq
 8004c4a:	68ec      	ldreq	r4, [r5, #12]
 8004c4c:	e7cb      	b.n	8004be6 <__swbuf_r+0x1a>
 8004c4e:	4621      	mov	r1, r4
 8004c50:	4628      	mov	r0, r5
 8004c52:	f000 f80d 	bl	8004c70 <__swsetup_r>
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d0cc      	beq.n	8004bf4 <__swbuf_r+0x28>
 8004c5a:	f04f 37ff 	mov.w	r7, #4294967295
 8004c5e:	4638      	mov	r0, r7
 8004c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c62:	bf00      	nop
 8004c64:	08005b58 	.word	0x08005b58
 8004c68:	08005b78 	.word	0x08005b78
 8004c6c:	08005b38 	.word	0x08005b38

08004c70 <__swsetup_r>:
 8004c70:	4b32      	ldr	r3, [pc, #200]	; (8004d3c <__swsetup_r+0xcc>)
 8004c72:	b570      	push	{r4, r5, r6, lr}
 8004c74:	681d      	ldr	r5, [r3, #0]
 8004c76:	4606      	mov	r6, r0
 8004c78:	460c      	mov	r4, r1
 8004c7a:	b125      	cbz	r5, 8004c86 <__swsetup_r+0x16>
 8004c7c:	69ab      	ldr	r3, [r5, #24]
 8004c7e:	b913      	cbnz	r3, 8004c86 <__swsetup_r+0x16>
 8004c80:	4628      	mov	r0, r5
 8004c82:	f000 f953 	bl	8004f2c <__sinit>
 8004c86:	4b2e      	ldr	r3, [pc, #184]	; (8004d40 <__swsetup_r+0xd0>)
 8004c88:	429c      	cmp	r4, r3
 8004c8a:	d10f      	bne.n	8004cac <__swsetup_r+0x3c>
 8004c8c:	686c      	ldr	r4, [r5, #4]
 8004c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	0715      	lsls	r5, r2, #28
 8004c96:	d42c      	bmi.n	8004cf2 <__swsetup_r+0x82>
 8004c98:	06d0      	lsls	r0, r2, #27
 8004c9a:	d411      	bmi.n	8004cc0 <__swsetup_r+0x50>
 8004c9c:	2209      	movs	r2, #9
 8004c9e:	6032      	str	r2, [r6, #0]
 8004ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ca4:	81a3      	strh	r3, [r4, #12]
 8004ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8004caa:	e03e      	b.n	8004d2a <__swsetup_r+0xba>
 8004cac:	4b25      	ldr	r3, [pc, #148]	; (8004d44 <__swsetup_r+0xd4>)
 8004cae:	429c      	cmp	r4, r3
 8004cb0:	d101      	bne.n	8004cb6 <__swsetup_r+0x46>
 8004cb2:	68ac      	ldr	r4, [r5, #8]
 8004cb4:	e7eb      	b.n	8004c8e <__swsetup_r+0x1e>
 8004cb6:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <__swsetup_r+0xd8>)
 8004cb8:	429c      	cmp	r4, r3
 8004cba:	bf08      	it	eq
 8004cbc:	68ec      	ldreq	r4, [r5, #12]
 8004cbe:	e7e6      	b.n	8004c8e <__swsetup_r+0x1e>
 8004cc0:	0751      	lsls	r1, r2, #29
 8004cc2:	d512      	bpl.n	8004cea <__swsetup_r+0x7a>
 8004cc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cc6:	b141      	cbz	r1, 8004cda <__swsetup_r+0x6a>
 8004cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ccc:	4299      	cmp	r1, r3
 8004cce:	d002      	beq.n	8004cd6 <__swsetup_r+0x66>
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f000 fa19 	bl	8005108 <_free_r>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	6363      	str	r3, [r4, #52]	; 0x34
 8004cda:	89a3      	ldrh	r3, [r4, #12]
 8004cdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ce0:	81a3      	strh	r3, [r4, #12]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	6063      	str	r3, [r4, #4]
 8004ce6:	6923      	ldr	r3, [r4, #16]
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	f043 0308 	orr.w	r3, r3, #8
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	6923      	ldr	r3, [r4, #16]
 8004cf4:	b94b      	cbnz	r3, 8004d0a <__swsetup_r+0x9a>
 8004cf6:	89a3      	ldrh	r3, [r4, #12]
 8004cf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d00:	d003      	beq.n	8004d0a <__swsetup_r+0x9a>
 8004d02:	4621      	mov	r1, r4
 8004d04:	4630      	mov	r0, r6
 8004d06:	f000 f9bf 	bl	8005088 <__smakebuf_r>
 8004d0a:	89a2      	ldrh	r2, [r4, #12]
 8004d0c:	f012 0301 	ands.w	r3, r2, #1
 8004d10:	d00c      	beq.n	8004d2c <__swsetup_r+0xbc>
 8004d12:	2300      	movs	r3, #0
 8004d14:	60a3      	str	r3, [r4, #8]
 8004d16:	6963      	ldr	r3, [r4, #20]
 8004d18:	425b      	negs	r3, r3
 8004d1a:	61a3      	str	r3, [r4, #24]
 8004d1c:	6923      	ldr	r3, [r4, #16]
 8004d1e:	b953      	cbnz	r3, 8004d36 <__swsetup_r+0xc6>
 8004d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004d28:	d1ba      	bne.n	8004ca0 <__swsetup_r+0x30>
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
 8004d2c:	0792      	lsls	r2, r2, #30
 8004d2e:	bf58      	it	pl
 8004d30:	6963      	ldrpl	r3, [r4, #20]
 8004d32:	60a3      	str	r3, [r4, #8]
 8004d34:	e7f2      	b.n	8004d1c <__swsetup_r+0xac>
 8004d36:	2000      	movs	r0, #0
 8004d38:	e7f7      	b.n	8004d2a <__swsetup_r+0xba>
 8004d3a:	bf00      	nop
 8004d3c:	20000014 	.word	0x20000014
 8004d40:	08005b58 	.word	0x08005b58
 8004d44:	08005b78 	.word	0x08005b78
 8004d48:	08005b38 	.word	0x08005b38

08004d4c <__sflush_r>:
 8004d4c:	898a      	ldrh	r2, [r1, #12]
 8004d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d52:	4605      	mov	r5, r0
 8004d54:	0710      	lsls	r0, r2, #28
 8004d56:	460c      	mov	r4, r1
 8004d58:	d458      	bmi.n	8004e0c <__sflush_r+0xc0>
 8004d5a:	684b      	ldr	r3, [r1, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	dc05      	bgt.n	8004d6c <__sflush_r+0x20>
 8004d60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	dc02      	bgt.n	8004d6c <__sflush_r+0x20>
 8004d66:	2000      	movs	r0, #0
 8004d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d6e:	2e00      	cmp	r6, #0
 8004d70:	d0f9      	beq.n	8004d66 <__sflush_r+0x1a>
 8004d72:	2300      	movs	r3, #0
 8004d74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d78:	682f      	ldr	r7, [r5, #0]
 8004d7a:	6a21      	ldr	r1, [r4, #32]
 8004d7c:	602b      	str	r3, [r5, #0]
 8004d7e:	d032      	beq.n	8004de6 <__sflush_r+0x9a>
 8004d80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	075a      	lsls	r2, r3, #29
 8004d86:	d505      	bpl.n	8004d94 <__sflush_r+0x48>
 8004d88:	6863      	ldr	r3, [r4, #4]
 8004d8a:	1ac0      	subs	r0, r0, r3
 8004d8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d8e:	b10b      	cbz	r3, 8004d94 <__sflush_r+0x48>
 8004d90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d92:	1ac0      	subs	r0, r0, r3
 8004d94:	2300      	movs	r3, #0
 8004d96:	4602      	mov	r2, r0
 8004d98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d9a:	6a21      	ldr	r1, [r4, #32]
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	47b0      	blx	r6
 8004da0:	1c43      	adds	r3, r0, #1
 8004da2:	89a3      	ldrh	r3, [r4, #12]
 8004da4:	d106      	bne.n	8004db4 <__sflush_r+0x68>
 8004da6:	6829      	ldr	r1, [r5, #0]
 8004da8:	291d      	cmp	r1, #29
 8004daa:	d848      	bhi.n	8004e3e <__sflush_r+0xf2>
 8004dac:	4a29      	ldr	r2, [pc, #164]	; (8004e54 <__sflush_r+0x108>)
 8004dae:	40ca      	lsrs	r2, r1
 8004db0:	07d6      	lsls	r6, r2, #31
 8004db2:	d544      	bpl.n	8004e3e <__sflush_r+0xf2>
 8004db4:	2200      	movs	r2, #0
 8004db6:	6062      	str	r2, [r4, #4]
 8004db8:	6922      	ldr	r2, [r4, #16]
 8004dba:	04d9      	lsls	r1, r3, #19
 8004dbc:	6022      	str	r2, [r4, #0]
 8004dbe:	d504      	bpl.n	8004dca <__sflush_r+0x7e>
 8004dc0:	1c42      	adds	r2, r0, #1
 8004dc2:	d101      	bne.n	8004dc8 <__sflush_r+0x7c>
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	b903      	cbnz	r3, 8004dca <__sflush_r+0x7e>
 8004dc8:	6560      	str	r0, [r4, #84]	; 0x54
 8004dca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dcc:	602f      	str	r7, [r5, #0]
 8004dce:	2900      	cmp	r1, #0
 8004dd0:	d0c9      	beq.n	8004d66 <__sflush_r+0x1a>
 8004dd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dd6:	4299      	cmp	r1, r3
 8004dd8:	d002      	beq.n	8004de0 <__sflush_r+0x94>
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f000 f994 	bl	8005108 <_free_r>
 8004de0:	2000      	movs	r0, #0
 8004de2:	6360      	str	r0, [r4, #52]	; 0x34
 8004de4:	e7c0      	b.n	8004d68 <__sflush_r+0x1c>
 8004de6:	2301      	movs	r3, #1
 8004de8:	4628      	mov	r0, r5
 8004dea:	47b0      	blx	r6
 8004dec:	1c41      	adds	r1, r0, #1
 8004dee:	d1c8      	bne.n	8004d82 <__sflush_r+0x36>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0c5      	beq.n	8004d82 <__sflush_r+0x36>
 8004df6:	2b1d      	cmp	r3, #29
 8004df8:	d001      	beq.n	8004dfe <__sflush_r+0xb2>
 8004dfa:	2b16      	cmp	r3, #22
 8004dfc:	d101      	bne.n	8004e02 <__sflush_r+0xb6>
 8004dfe:	602f      	str	r7, [r5, #0]
 8004e00:	e7b1      	b.n	8004d66 <__sflush_r+0x1a>
 8004e02:	89a3      	ldrh	r3, [r4, #12]
 8004e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e08:	81a3      	strh	r3, [r4, #12]
 8004e0a:	e7ad      	b.n	8004d68 <__sflush_r+0x1c>
 8004e0c:	690f      	ldr	r7, [r1, #16]
 8004e0e:	2f00      	cmp	r7, #0
 8004e10:	d0a9      	beq.n	8004d66 <__sflush_r+0x1a>
 8004e12:	0793      	lsls	r3, r2, #30
 8004e14:	bf18      	it	ne
 8004e16:	2300      	movne	r3, #0
 8004e18:	680e      	ldr	r6, [r1, #0]
 8004e1a:	bf08      	it	eq
 8004e1c:	694b      	ldreq	r3, [r1, #20]
 8004e1e:	eba6 0807 	sub.w	r8, r6, r7
 8004e22:	600f      	str	r7, [r1, #0]
 8004e24:	608b      	str	r3, [r1, #8]
 8004e26:	f1b8 0f00 	cmp.w	r8, #0
 8004e2a:	dd9c      	ble.n	8004d66 <__sflush_r+0x1a>
 8004e2c:	4643      	mov	r3, r8
 8004e2e:	463a      	mov	r2, r7
 8004e30:	6a21      	ldr	r1, [r4, #32]
 8004e32:	4628      	mov	r0, r5
 8004e34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e36:	47b0      	blx	r6
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	dc06      	bgt.n	8004e4a <__sflush_r+0xfe>
 8004e3c:	89a3      	ldrh	r3, [r4, #12]
 8004e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e42:	81a3      	strh	r3, [r4, #12]
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295
 8004e48:	e78e      	b.n	8004d68 <__sflush_r+0x1c>
 8004e4a:	4407      	add	r7, r0
 8004e4c:	eba8 0800 	sub.w	r8, r8, r0
 8004e50:	e7e9      	b.n	8004e26 <__sflush_r+0xda>
 8004e52:	bf00      	nop
 8004e54:	20400001 	.word	0x20400001

08004e58 <_fflush_r>:
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	690b      	ldr	r3, [r1, #16]
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	460c      	mov	r4, r1
 8004e60:	b1db      	cbz	r3, 8004e9a <_fflush_r+0x42>
 8004e62:	b118      	cbz	r0, 8004e6c <_fflush_r+0x14>
 8004e64:	6983      	ldr	r3, [r0, #24]
 8004e66:	b90b      	cbnz	r3, 8004e6c <_fflush_r+0x14>
 8004e68:	f000 f860 	bl	8004f2c <__sinit>
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <_fflush_r+0x48>)
 8004e6e:	429c      	cmp	r4, r3
 8004e70:	d109      	bne.n	8004e86 <_fflush_r+0x2e>
 8004e72:	686c      	ldr	r4, [r5, #4]
 8004e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e78:	b17b      	cbz	r3, 8004e9a <_fflush_r+0x42>
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e82:	f7ff bf63 	b.w	8004d4c <__sflush_r>
 8004e86:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <_fflush_r+0x4c>)
 8004e88:	429c      	cmp	r4, r3
 8004e8a:	d101      	bne.n	8004e90 <_fflush_r+0x38>
 8004e8c:	68ac      	ldr	r4, [r5, #8]
 8004e8e:	e7f1      	b.n	8004e74 <_fflush_r+0x1c>
 8004e90:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <_fflush_r+0x50>)
 8004e92:	429c      	cmp	r4, r3
 8004e94:	bf08      	it	eq
 8004e96:	68ec      	ldreq	r4, [r5, #12]
 8004e98:	e7ec      	b.n	8004e74 <_fflush_r+0x1c>
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	bd38      	pop	{r3, r4, r5, pc}
 8004e9e:	bf00      	nop
 8004ea0:	08005b58 	.word	0x08005b58
 8004ea4:	08005b78 	.word	0x08005b78
 8004ea8:	08005b38 	.word	0x08005b38

08004eac <std>:
 8004eac:	2300      	movs	r3, #0
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8004eb6:	6083      	str	r3, [r0, #8]
 8004eb8:	8181      	strh	r1, [r0, #12]
 8004eba:	6643      	str	r3, [r0, #100]	; 0x64
 8004ebc:	81c2      	strh	r2, [r0, #14]
 8004ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ec2:	6183      	str	r3, [r0, #24]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	2208      	movs	r2, #8
 8004ec8:	305c      	adds	r0, #92	; 0x5c
 8004eca:	f7ff fdf2 	bl	8004ab2 <memset>
 8004ece:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <std+0x38>)
 8004ed0:	6224      	str	r4, [r4, #32]
 8004ed2:	6263      	str	r3, [r4, #36]	; 0x24
 8004ed4:	4b04      	ldr	r3, [pc, #16]	; (8004ee8 <std+0x3c>)
 8004ed6:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ed8:	4b04      	ldr	r3, [pc, #16]	; (8004eec <std+0x40>)
 8004eda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004edc:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <std+0x44>)
 8004ede:	6323      	str	r3, [r4, #48]	; 0x30
 8004ee0:	bd10      	pop	{r4, pc}
 8004ee2:	bf00      	nop
 8004ee4:	08005829 	.word	0x08005829
 8004ee8:	0800584b 	.word	0x0800584b
 8004eec:	08005883 	.word	0x08005883
 8004ef0:	080058a7 	.word	0x080058a7

08004ef4 <_cleanup_r>:
 8004ef4:	4901      	ldr	r1, [pc, #4]	; (8004efc <_cleanup_r+0x8>)
 8004ef6:	f000 b885 	b.w	8005004 <_fwalk_reent>
 8004efa:	bf00      	nop
 8004efc:	08004e59 	.word	0x08004e59

08004f00 <__sfmoreglue>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	2568      	movs	r5, #104	; 0x68
 8004f04:	1e4a      	subs	r2, r1, #1
 8004f06:	4355      	muls	r5, r2
 8004f08:	460e      	mov	r6, r1
 8004f0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f0e:	f000 f947 	bl	80051a0 <_malloc_r>
 8004f12:	4604      	mov	r4, r0
 8004f14:	b140      	cbz	r0, 8004f28 <__sfmoreglue+0x28>
 8004f16:	2100      	movs	r1, #0
 8004f18:	e9c0 1600 	strd	r1, r6, [r0]
 8004f1c:	300c      	adds	r0, #12
 8004f1e:	60a0      	str	r0, [r4, #8]
 8004f20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f24:	f7ff fdc5 	bl	8004ab2 <memset>
 8004f28:	4620      	mov	r0, r4
 8004f2a:	bd70      	pop	{r4, r5, r6, pc}

08004f2c <__sinit>:
 8004f2c:	6983      	ldr	r3, [r0, #24]
 8004f2e:	b510      	push	{r4, lr}
 8004f30:	4604      	mov	r4, r0
 8004f32:	bb33      	cbnz	r3, 8004f82 <__sinit+0x56>
 8004f34:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004f38:	6503      	str	r3, [r0, #80]	; 0x50
 8004f3a:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <__sinit+0x58>)
 8004f3c:	4a12      	ldr	r2, [pc, #72]	; (8004f88 <__sinit+0x5c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6282      	str	r2, [r0, #40]	; 0x28
 8004f42:	4298      	cmp	r0, r3
 8004f44:	bf04      	itt	eq
 8004f46:	2301      	moveq	r3, #1
 8004f48:	6183      	streq	r3, [r0, #24]
 8004f4a:	f000 f81f 	bl	8004f8c <__sfp>
 8004f4e:	6060      	str	r0, [r4, #4]
 8004f50:	4620      	mov	r0, r4
 8004f52:	f000 f81b 	bl	8004f8c <__sfp>
 8004f56:	60a0      	str	r0, [r4, #8]
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f000 f817 	bl	8004f8c <__sfp>
 8004f5e:	2200      	movs	r2, #0
 8004f60:	60e0      	str	r0, [r4, #12]
 8004f62:	2104      	movs	r1, #4
 8004f64:	6860      	ldr	r0, [r4, #4]
 8004f66:	f7ff ffa1 	bl	8004eac <std>
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	2109      	movs	r1, #9
 8004f6e:	68a0      	ldr	r0, [r4, #8]
 8004f70:	f7ff ff9c 	bl	8004eac <std>
 8004f74:	2202      	movs	r2, #2
 8004f76:	2112      	movs	r1, #18
 8004f78:	68e0      	ldr	r0, [r4, #12]
 8004f7a:	f7ff ff97 	bl	8004eac <std>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	61a3      	str	r3, [r4, #24]
 8004f82:	bd10      	pop	{r4, pc}
 8004f84:	08005b34 	.word	0x08005b34
 8004f88:	08004ef5 	.word	0x08004ef5

08004f8c <__sfp>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	4b1b      	ldr	r3, [pc, #108]	; (8004ffc <__sfp+0x70>)
 8004f90:	4607      	mov	r7, r0
 8004f92:	681e      	ldr	r6, [r3, #0]
 8004f94:	69b3      	ldr	r3, [r6, #24]
 8004f96:	b913      	cbnz	r3, 8004f9e <__sfp+0x12>
 8004f98:	4630      	mov	r0, r6
 8004f9a:	f7ff ffc7 	bl	8004f2c <__sinit>
 8004f9e:	3648      	adds	r6, #72	; 0x48
 8004fa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	d503      	bpl.n	8004fb0 <__sfp+0x24>
 8004fa8:	6833      	ldr	r3, [r6, #0]
 8004faa:	b133      	cbz	r3, 8004fba <__sfp+0x2e>
 8004fac:	6836      	ldr	r6, [r6, #0]
 8004fae:	e7f7      	b.n	8004fa0 <__sfp+0x14>
 8004fb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fb4:	b16d      	cbz	r5, 8004fd2 <__sfp+0x46>
 8004fb6:	3468      	adds	r4, #104	; 0x68
 8004fb8:	e7f4      	b.n	8004fa4 <__sfp+0x18>
 8004fba:	2104      	movs	r1, #4
 8004fbc:	4638      	mov	r0, r7
 8004fbe:	f7ff ff9f 	bl	8004f00 <__sfmoreglue>
 8004fc2:	6030      	str	r0, [r6, #0]
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d1f1      	bne.n	8004fac <__sfp+0x20>
 8004fc8:	230c      	movs	r3, #12
 8004fca:	4604      	mov	r4, r0
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	4620      	mov	r0, r4
 8004fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fd2:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <__sfp+0x74>)
 8004fd4:	6665      	str	r5, [r4, #100]	; 0x64
 8004fd6:	e9c4 5500 	strd	r5, r5, [r4]
 8004fda:	60a5      	str	r5, [r4, #8]
 8004fdc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004fe0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004fe4:	2208      	movs	r2, #8
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fec:	f7ff fd61 	bl	8004ab2 <memset>
 8004ff0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ff4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ff8:	e7e9      	b.n	8004fce <__sfp+0x42>
 8004ffa:	bf00      	nop
 8004ffc:	08005b34 	.word	0x08005b34
 8005000:	ffff0001 	.word	0xffff0001

08005004 <_fwalk_reent>:
 8005004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005008:	4680      	mov	r8, r0
 800500a:	4689      	mov	r9, r1
 800500c:	2600      	movs	r6, #0
 800500e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005012:	b914      	cbnz	r4, 800501a <_fwalk_reent+0x16>
 8005014:	4630      	mov	r0, r6
 8005016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800501a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800501e:	3f01      	subs	r7, #1
 8005020:	d501      	bpl.n	8005026 <_fwalk_reent+0x22>
 8005022:	6824      	ldr	r4, [r4, #0]
 8005024:	e7f5      	b.n	8005012 <_fwalk_reent+0xe>
 8005026:	89ab      	ldrh	r3, [r5, #12]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d907      	bls.n	800503c <_fwalk_reent+0x38>
 800502c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005030:	3301      	adds	r3, #1
 8005032:	d003      	beq.n	800503c <_fwalk_reent+0x38>
 8005034:	4629      	mov	r1, r5
 8005036:	4640      	mov	r0, r8
 8005038:	47c8      	blx	r9
 800503a:	4306      	orrs	r6, r0
 800503c:	3568      	adds	r5, #104	; 0x68
 800503e:	e7ee      	b.n	800501e <_fwalk_reent+0x1a>

08005040 <__swhatbuf_r>:
 8005040:	b570      	push	{r4, r5, r6, lr}
 8005042:	460e      	mov	r6, r1
 8005044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005048:	b096      	sub	sp, #88	; 0x58
 800504a:	2900      	cmp	r1, #0
 800504c:	4614      	mov	r4, r2
 800504e:	461d      	mov	r5, r3
 8005050:	da07      	bge.n	8005062 <__swhatbuf_r+0x22>
 8005052:	2300      	movs	r3, #0
 8005054:	602b      	str	r3, [r5, #0]
 8005056:	89b3      	ldrh	r3, [r6, #12]
 8005058:	061a      	lsls	r2, r3, #24
 800505a:	d410      	bmi.n	800507e <__swhatbuf_r+0x3e>
 800505c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005060:	e00e      	b.n	8005080 <__swhatbuf_r+0x40>
 8005062:	466a      	mov	r2, sp
 8005064:	f000 fc46 	bl	80058f4 <_fstat_r>
 8005068:	2800      	cmp	r0, #0
 800506a:	dbf2      	blt.n	8005052 <__swhatbuf_r+0x12>
 800506c:	9a01      	ldr	r2, [sp, #4]
 800506e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005072:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005076:	425a      	negs	r2, r3
 8005078:	415a      	adcs	r2, r3
 800507a:	602a      	str	r2, [r5, #0]
 800507c:	e7ee      	b.n	800505c <__swhatbuf_r+0x1c>
 800507e:	2340      	movs	r3, #64	; 0x40
 8005080:	2000      	movs	r0, #0
 8005082:	6023      	str	r3, [r4, #0]
 8005084:	b016      	add	sp, #88	; 0x58
 8005086:	bd70      	pop	{r4, r5, r6, pc}

08005088 <__smakebuf_r>:
 8005088:	898b      	ldrh	r3, [r1, #12]
 800508a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800508c:	079d      	lsls	r5, r3, #30
 800508e:	4606      	mov	r6, r0
 8005090:	460c      	mov	r4, r1
 8005092:	d507      	bpl.n	80050a4 <__smakebuf_r+0x1c>
 8005094:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	6123      	str	r3, [r4, #16]
 800509c:	2301      	movs	r3, #1
 800509e:	6163      	str	r3, [r4, #20]
 80050a0:	b002      	add	sp, #8
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
 80050a4:	ab01      	add	r3, sp, #4
 80050a6:	466a      	mov	r2, sp
 80050a8:	f7ff ffca 	bl	8005040 <__swhatbuf_r>
 80050ac:	9900      	ldr	r1, [sp, #0]
 80050ae:	4605      	mov	r5, r0
 80050b0:	4630      	mov	r0, r6
 80050b2:	f000 f875 	bl	80051a0 <_malloc_r>
 80050b6:	b948      	cbnz	r0, 80050cc <__smakebuf_r+0x44>
 80050b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050bc:	059a      	lsls	r2, r3, #22
 80050be:	d4ef      	bmi.n	80050a0 <__smakebuf_r+0x18>
 80050c0:	f023 0303 	bic.w	r3, r3, #3
 80050c4:	f043 0302 	orr.w	r3, r3, #2
 80050c8:	81a3      	strh	r3, [r4, #12]
 80050ca:	e7e3      	b.n	8005094 <__smakebuf_r+0xc>
 80050cc:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <__smakebuf_r+0x7c>)
 80050ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	6020      	str	r0, [r4, #0]
 80050d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d8:	81a3      	strh	r3, [r4, #12]
 80050da:	9b00      	ldr	r3, [sp, #0]
 80050dc:	6120      	str	r0, [r4, #16]
 80050de:	6163      	str	r3, [r4, #20]
 80050e0:	9b01      	ldr	r3, [sp, #4]
 80050e2:	b15b      	cbz	r3, 80050fc <__smakebuf_r+0x74>
 80050e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050e8:	4630      	mov	r0, r6
 80050ea:	f000 fc15 	bl	8005918 <_isatty_r>
 80050ee:	b128      	cbz	r0, 80050fc <__smakebuf_r+0x74>
 80050f0:	89a3      	ldrh	r3, [r4, #12]
 80050f2:	f023 0303 	bic.w	r3, r3, #3
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	81a3      	strh	r3, [r4, #12]
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	431d      	orrs	r5, r3
 8005100:	81a5      	strh	r5, [r4, #12]
 8005102:	e7cd      	b.n	80050a0 <__smakebuf_r+0x18>
 8005104:	08004ef5 	.word	0x08004ef5

08005108 <_free_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4605      	mov	r5, r0
 800510c:	2900      	cmp	r1, #0
 800510e:	d043      	beq.n	8005198 <_free_r+0x90>
 8005110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005114:	1f0c      	subs	r4, r1, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	bfb8      	it	lt
 800511a:	18e4      	addlt	r4, r4, r3
 800511c:	f000 fc45 	bl	80059aa <__malloc_lock>
 8005120:	4a1e      	ldr	r2, [pc, #120]	; (800519c <_free_r+0x94>)
 8005122:	6813      	ldr	r3, [r2, #0]
 8005124:	4610      	mov	r0, r2
 8005126:	b933      	cbnz	r3, 8005136 <_free_r+0x2e>
 8005128:	6063      	str	r3, [r4, #4]
 800512a:	6014      	str	r4, [r2, #0]
 800512c:	4628      	mov	r0, r5
 800512e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005132:	f000 bc3b 	b.w	80059ac <__malloc_unlock>
 8005136:	42a3      	cmp	r3, r4
 8005138:	d90b      	bls.n	8005152 <_free_r+0x4a>
 800513a:	6821      	ldr	r1, [r4, #0]
 800513c:	1862      	adds	r2, r4, r1
 800513e:	4293      	cmp	r3, r2
 8005140:	bf01      	itttt	eq
 8005142:	681a      	ldreq	r2, [r3, #0]
 8005144:	685b      	ldreq	r3, [r3, #4]
 8005146:	1852      	addeq	r2, r2, r1
 8005148:	6022      	streq	r2, [r4, #0]
 800514a:	6063      	str	r3, [r4, #4]
 800514c:	6004      	str	r4, [r0, #0]
 800514e:	e7ed      	b.n	800512c <_free_r+0x24>
 8005150:	4613      	mov	r3, r2
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	b10a      	cbz	r2, 800515a <_free_r+0x52>
 8005156:	42a2      	cmp	r2, r4
 8005158:	d9fa      	bls.n	8005150 <_free_r+0x48>
 800515a:	6819      	ldr	r1, [r3, #0]
 800515c:	1858      	adds	r0, r3, r1
 800515e:	42a0      	cmp	r0, r4
 8005160:	d10b      	bne.n	800517a <_free_r+0x72>
 8005162:	6820      	ldr	r0, [r4, #0]
 8005164:	4401      	add	r1, r0
 8005166:	1858      	adds	r0, r3, r1
 8005168:	4282      	cmp	r2, r0
 800516a:	6019      	str	r1, [r3, #0]
 800516c:	d1de      	bne.n	800512c <_free_r+0x24>
 800516e:	6810      	ldr	r0, [r2, #0]
 8005170:	6852      	ldr	r2, [r2, #4]
 8005172:	4401      	add	r1, r0
 8005174:	6019      	str	r1, [r3, #0]
 8005176:	605a      	str	r2, [r3, #4]
 8005178:	e7d8      	b.n	800512c <_free_r+0x24>
 800517a:	d902      	bls.n	8005182 <_free_r+0x7a>
 800517c:	230c      	movs	r3, #12
 800517e:	602b      	str	r3, [r5, #0]
 8005180:	e7d4      	b.n	800512c <_free_r+0x24>
 8005182:	6820      	ldr	r0, [r4, #0]
 8005184:	1821      	adds	r1, r4, r0
 8005186:	428a      	cmp	r2, r1
 8005188:	bf01      	itttt	eq
 800518a:	6811      	ldreq	r1, [r2, #0]
 800518c:	6852      	ldreq	r2, [r2, #4]
 800518e:	1809      	addeq	r1, r1, r0
 8005190:	6021      	streq	r1, [r4, #0]
 8005192:	6062      	str	r2, [r4, #4]
 8005194:	605c      	str	r4, [r3, #4]
 8005196:	e7c9      	b.n	800512c <_free_r+0x24>
 8005198:	bd38      	pop	{r3, r4, r5, pc}
 800519a:	bf00      	nop
 800519c:	20000ee8 	.word	0x20000ee8

080051a0 <_malloc_r>:
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	1ccd      	adds	r5, r1, #3
 80051a4:	f025 0503 	bic.w	r5, r5, #3
 80051a8:	3508      	adds	r5, #8
 80051aa:	2d0c      	cmp	r5, #12
 80051ac:	bf38      	it	cc
 80051ae:	250c      	movcc	r5, #12
 80051b0:	2d00      	cmp	r5, #0
 80051b2:	4606      	mov	r6, r0
 80051b4:	db01      	blt.n	80051ba <_malloc_r+0x1a>
 80051b6:	42a9      	cmp	r1, r5
 80051b8:	d903      	bls.n	80051c2 <_malloc_r+0x22>
 80051ba:	230c      	movs	r3, #12
 80051bc:	6033      	str	r3, [r6, #0]
 80051be:	2000      	movs	r0, #0
 80051c0:	bd70      	pop	{r4, r5, r6, pc}
 80051c2:	f000 fbf2 	bl	80059aa <__malloc_lock>
 80051c6:	4a21      	ldr	r2, [pc, #132]	; (800524c <_malloc_r+0xac>)
 80051c8:	6814      	ldr	r4, [r2, #0]
 80051ca:	4621      	mov	r1, r4
 80051cc:	b991      	cbnz	r1, 80051f4 <_malloc_r+0x54>
 80051ce:	4c20      	ldr	r4, [pc, #128]	; (8005250 <_malloc_r+0xb0>)
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	b91b      	cbnz	r3, 80051dc <_malloc_r+0x3c>
 80051d4:	4630      	mov	r0, r6
 80051d6:	f000 fb17 	bl	8005808 <_sbrk_r>
 80051da:	6020      	str	r0, [r4, #0]
 80051dc:	4629      	mov	r1, r5
 80051de:	4630      	mov	r0, r6
 80051e0:	f000 fb12 	bl	8005808 <_sbrk_r>
 80051e4:	1c43      	adds	r3, r0, #1
 80051e6:	d124      	bne.n	8005232 <_malloc_r+0x92>
 80051e8:	230c      	movs	r3, #12
 80051ea:	4630      	mov	r0, r6
 80051ec:	6033      	str	r3, [r6, #0]
 80051ee:	f000 fbdd 	bl	80059ac <__malloc_unlock>
 80051f2:	e7e4      	b.n	80051be <_malloc_r+0x1e>
 80051f4:	680b      	ldr	r3, [r1, #0]
 80051f6:	1b5b      	subs	r3, r3, r5
 80051f8:	d418      	bmi.n	800522c <_malloc_r+0x8c>
 80051fa:	2b0b      	cmp	r3, #11
 80051fc:	d90f      	bls.n	800521e <_malloc_r+0x7e>
 80051fe:	600b      	str	r3, [r1, #0]
 8005200:	18cc      	adds	r4, r1, r3
 8005202:	50cd      	str	r5, [r1, r3]
 8005204:	4630      	mov	r0, r6
 8005206:	f000 fbd1 	bl	80059ac <__malloc_unlock>
 800520a:	f104 000b 	add.w	r0, r4, #11
 800520e:	1d23      	adds	r3, r4, #4
 8005210:	f020 0007 	bic.w	r0, r0, #7
 8005214:	1ac3      	subs	r3, r0, r3
 8005216:	d0d3      	beq.n	80051c0 <_malloc_r+0x20>
 8005218:	425a      	negs	r2, r3
 800521a:	50e2      	str	r2, [r4, r3]
 800521c:	e7d0      	b.n	80051c0 <_malloc_r+0x20>
 800521e:	684b      	ldr	r3, [r1, #4]
 8005220:	428c      	cmp	r4, r1
 8005222:	bf16      	itet	ne
 8005224:	6063      	strne	r3, [r4, #4]
 8005226:	6013      	streq	r3, [r2, #0]
 8005228:	460c      	movne	r4, r1
 800522a:	e7eb      	b.n	8005204 <_malloc_r+0x64>
 800522c:	460c      	mov	r4, r1
 800522e:	6849      	ldr	r1, [r1, #4]
 8005230:	e7cc      	b.n	80051cc <_malloc_r+0x2c>
 8005232:	1cc4      	adds	r4, r0, #3
 8005234:	f024 0403 	bic.w	r4, r4, #3
 8005238:	42a0      	cmp	r0, r4
 800523a:	d005      	beq.n	8005248 <_malloc_r+0xa8>
 800523c:	1a21      	subs	r1, r4, r0
 800523e:	4630      	mov	r0, r6
 8005240:	f000 fae2 	bl	8005808 <_sbrk_r>
 8005244:	3001      	adds	r0, #1
 8005246:	d0cf      	beq.n	80051e8 <_malloc_r+0x48>
 8005248:	6025      	str	r5, [r4, #0]
 800524a:	e7db      	b.n	8005204 <_malloc_r+0x64>
 800524c:	20000ee8 	.word	0x20000ee8
 8005250:	20000eec 	.word	0x20000eec

08005254 <__ssputs_r>:
 8005254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005258:	688e      	ldr	r6, [r1, #8]
 800525a:	4682      	mov	sl, r0
 800525c:	429e      	cmp	r6, r3
 800525e:	460c      	mov	r4, r1
 8005260:	4690      	mov	r8, r2
 8005262:	4699      	mov	r9, r3
 8005264:	d837      	bhi.n	80052d6 <__ssputs_r+0x82>
 8005266:	898a      	ldrh	r2, [r1, #12]
 8005268:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800526c:	d031      	beq.n	80052d2 <__ssputs_r+0x7e>
 800526e:	2302      	movs	r3, #2
 8005270:	6825      	ldr	r5, [r4, #0]
 8005272:	6909      	ldr	r1, [r1, #16]
 8005274:	1a6f      	subs	r7, r5, r1
 8005276:	6965      	ldr	r5, [r4, #20]
 8005278:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800527c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005280:	f109 0301 	add.w	r3, r9, #1
 8005284:	443b      	add	r3, r7
 8005286:	429d      	cmp	r5, r3
 8005288:	bf38      	it	cc
 800528a:	461d      	movcc	r5, r3
 800528c:	0553      	lsls	r3, r2, #21
 800528e:	d530      	bpl.n	80052f2 <__ssputs_r+0x9e>
 8005290:	4629      	mov	r1, r5
 8005292:	f7ff ff85 	bl	80051a0 <_malloc_r>
 8005296:	4606      	mov	r6, r0
 8005298:	b950      	cbnz	r0, 80052b0 <__ssputs_r+0x5c>
 800529a:	230c      	movs	r3, #12
 800529c:	f04f 30ff 	mov.w	r0, #4294967295
 80052a0:	f8ca 3000 	str.w	r3, [sl]
 80052a4:	89a3      	ldrh	r3, [r4, #12]
 80052a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052aa:	81a3      	strh	r3, [r4, #12]
 80052ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b0:	463a      	mov	r2, r7
 80052b2:	6921      	ldr	r1, [r4, #16]
 80052b4:	f7ff fbf2 	bl	8004a9c <memcpy>
 80052b8:	89a3      	ldrh	r3, [r4, #12]
 80052ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c2:	81a3      	strh	r3, [r4, #12]
 80052c4:	6126      	str	r6, [r4, #16]
 80052c6:	443e      	add	r6, r7
 80052c8:	6026      	str	r6, [r4, #0]
 80052ca:	464e      	mov	r6, r9
 80052cc:	6165      	str	r5, [r4, #20]
 80052ce:	1bed      	subs	r5, r5, r7
 80052d0:	60a5      	str	r5, [r4, #8]
 80052d2:	454e      	cmp	r6, r9
 80052d4:	d900      	bls.n	80052d8 <__ssputs_r+0x84>
 80052d6:	464e      	mov	r6, r9
 80052d8:	4632      	mov	r2, r6
 80052da:	4641      	mov	r1, r8
 80052dc:	6820      	ldr	r0, [r4, #0]
 80052de:	f000 fb4b 	bl	8005978 <memmove>
 80052e2:	68a3      	ldr	r3, [r4, #8]
 80052e4:	2000      	movs	r0, #0
 80052e6:	1b9b      	subs	r3, r3, r6
 80052e8:	60a3      	str	r3, [r4, #8]
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	441e      	add	r6, r3
 80052ee:	6026      	str	r6, [r4, #0]
 80052f0:	e7dc      	b.n	80052ac <__ssputs_r+0x58>
 80052f2:	462a      	mov	r2, r5
 80052f4:	f000 fb5b 	bl	80059ae <_realloc_r>
 80052f8:	4606      	mov	r6, r0
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d1e2      	bne.n	80052c4 <__ssputs_r+0x70>
 80052fe:	6921      	ldr	r1, [r4, #16]
 8005300:	4650      	mov	r0, sl
 8005302:	f7ff ff01 	bl	8005108 <_free_r>
 8005306:	e7c8      	b.n	800529a <__ssputs_r+0x46>

08005308 <_svfiprintf_r>:
 8005308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530c:	461d      	mov	r5, r3
 800530e:	898b      	ldrh	r3, [r1, #12]
 8005310:	b09d      	sub	sp, #116	; 0x74
 8005312:	061f      	lsls	r7, r3, #24
 8005314:	4680      	mov	r8, r0
 8005316:	460c      	mov	r4, r1
 8005318:	4616      	mov	r6, r2
 800531a:	d50f      	bpl.n	800533c <_svfiprintf_r+0x34>
 800531c:	690b      	ldr	r3, [r1, #16]
 800531e:	b96b      	cbnz	r3, 800533c <_svfiprintf_r+0x34>
 8005320:	2140      	movs	r1, #64	; 0x40
 8005322:	f7ff ff3d 	bl	80051a0 <_malloc_r>
 8005326:	6020      	str	r0, [r4, #0]
 8005328:	6120      	str	r0, [r4, #16]
 800532a:	b928      	cbnz	r0, 8005338 <_svfiprintf_r+0x30>
 800532c:	230c      	movs	r3, #12
 800532e:	f8c8 3000 	str.w	r3, [r8]
 8005332:	f04f 30ff 	mov.w	r0, #4294967295
 8005336:	e0c8      	b.n	80054ca <_svfiprintf_r+0x1c2>
 8005338:	2340      	movs	r3, #64	; 0x40
 800533a:	6163      	str	r3, [r4, #20]
 800533c:	2300      	movs	r3, #0
 800533e:	9309      	str	r3, [sp, #36]	; 0x24
 8005340:	2320      	movs	r3, #32
 8005342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005346:	2330      	movs	r3, #48	; 0x30
 8005348:	f04f 0b01 	mov.w	fp, #1
 800534c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005350:	9503      	str	r5, [sp, #12]
 8005352:	4637      	mov	r7, r6
 8005354:	463d      	mov	r5, r7
 8005356:	f815 3b01 	ldrb.w	r3, [r5], #1
 800535a:	b10b      	cbz	r3, 8005360 <_svfiprintf_r+0x58>
 800535c:	2b25      	cmp	r3, #37	; 0x25
 800535e:	d13e      	bne.n	80053de <_svfiprintf_r+0xd6>
 8005360:	ebb7 0a06 	subs.w	sl, r7, r6
 8005364:	d00b      	beq.n	800537e <_svfiprintf_r+0x76>
 8005366:	4653      	mov	r3, sl
 8005368:	4632      	mov	r2, r6
 800536a:	4621      	mov	r1, r4
 800536c:	4640      	mov	r0, r8
 800536e:	f7ff ff71 	bl	8005254 <__ssputs_r>
 8005372:	3001      	adds	r0, #1
 8005374:	f000 80a4 	beq.w	80054c0 <_svfiprintf_r+0x1b8>
 8005378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800537a:	4453      	add	r3, sl
 800537c:	9309      	str	r3, [sp, #36]	; 0x24
 800537e:	783b      	ldrb	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 809d 	beq.w	80054c0 <_svfiprintf_r+0x1b8>
 8005386:	2300      	movs	r3, #0
 8005388:	f04f 32ff 	mov.w	r2, #4294967295
 800538c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005390:	9304      	str	r3, [sp, #16]
 8005392:	9307      	str	r3, [sp, #28]
 8005394:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005398:	931a      	str	r3, [sp, #104]	; 0x68
 800539a:	462f      	mov	r7, r5
 800539c:	2205      	movs	r2, #5
 800539e:	f817 1b01 	ldrb.w	r1, [r7], #1
 80053a2:	4850      	ldr	r0, [pc, #320]	; (80054e4 <_svfiprintf_r+0x1dc>)
 80053a4:	f000 fada 	bl	800595c <memchr>
 80053a8:	9b04      	ldr	r3, [sp, #16]
 80053aa:	b9d0      	cbnz	r0, 80053e2 <_svfiprintf_r+0xda>
 80053ac:	06d9      	lsls	r1, r3, #27
 80053ae:	bf44      	itt	mi
 80053b0:	2220      	movmi	r2, #32
 80053b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80053b6:	071a      	lsls	r2, r3, #28
 80053b8:	bf44      	itt	mi
 80053ba:	222b      	movmi	r2, #43	; 0x2b
 80053bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80053c0:	782a      	ldrb	r2, [r5, #0]
 80053c2:	2a2a      	cmp	r2, #42	; 0x2a
 80053c4:	d015      	beq.n	80053f2 <_svfiprintf_r+0xea>
 80053c6:	462f      	mov	r7, r5
 80053c8:	2000      	movs	r0, #0
 80053ca:	250a      	movs	r5, #10
 80053cc:	9a07      	ldr	r2, [sp, #28]
 80053ce:	4639      	mov	r1, r7
 80053d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053d4:	3b30      	subs	r3, #48	; 0x30
 80053d6:	2b09      	cmp	r3, #9
 80053d8:	d94d      	bls.n	8005476 <_svfiprintf_r+0x16e>
 80053da:	b1b8      	cbz	r0, 800540c <_svfiprintf_r+0x104>
 80053dc:	e00f      	b.n	80053fe <_svfiprintf_r+0xf6>
 80053de:	462f      	mov	r7, r5
 80053e0:	e7b8      	b.n	8005354 <_svfiprintf_r+0x4c>
 80053e2:	4a40      	ldr	r2, [pc, #256]	; (80054e4 <_svfiprintf_r+0x1dc>)
 80053e4:	463d      	mov	r5, r7
 80053e6:	1a80      	subs	r0, r0, r2
 80053e8:	fa0b f000 	lsl.w	r0, fp, r0
 80053ec:	4318      	orrs	r0, r3
 80053ee:	9004      	str	r0, [sp, #16]
 80053f0:	e7d3      	b.n	800539a <_svfiprintf_r+0x92>
 80053f2:	9a03      	ldr	r2, [sp, #12]
 80053f4:	1d11      	adds	r1, r2, #4
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	9103      	str	r1, [sp, #12]
 80053fa:	2a00      	cmp	r2, #0
 80053fc:	db01      	blt.n	8005402 <_svfiprintf_r+0xfa>
 80053fe:	9207      	str	r2, [sp, #28]
 8005400:	e004      	b.n	800540c <_svfiprintf_r+0x104>
 8005402:	4252      	negs	r2, r2
 8005404:	f043 0302 	orr.w	r3, r3, #2
 8005408:	9207      	str	r2, [sp, #28]
 800540a:	9304      	str	r3, [sp, #16]
 800540c:	783b      	ldrb	r3, [r7, #0]
 800540e:	2b2e      	cmp	r3, #46	; 0x2e
 8005410:	d10c      	bne.n	800542c <_svfiprintf_r+0x124>
 8005412:	787b      	ldrb	r3, [r7, #1]
 8005414:	2b2a      	cmp	r3, #42	; 0x2a
 8005416:	d133      	bne.n	8005480 <_svfiprintf_r+0x178>
 8005418:	9b03      	ldr	r3, [sp, #12]
 800541a:	3702      	adds	r7, #2
 800541c:	1d1a      	adds	r2, r3, #4
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	9203      	str	r2, [sp, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	bfb8      	it	lt
 8005426:	f04f 33ff 	movlt.w	r3, #4294967295
 800542a:	9305      	str	r3, [sp, #20]
 800542c:	4d2e      	ldr	r5, [pc, #184]	; (80054e8 <_svfiprintf_r+0x1e0>)
 800542e:	2203      	movs	r2, #3
 8005430:	7839      	ldrb	r1, [r7, #0]
 8005432:	4628      	mov	r0, r5
 8005434:	f000 fa92 	bl	800595c <memchr>
 8005438:	b138      	cbz	r0, 800544a <_svfiprintf_r+0x142>
 800543a:	2340      	movs	r3, #64	; 0x40
 800543c:	1b40      	subs	r0, r0, r5
 800543e:	fa03 f000 	lsl.w	r0, r3, r0
 8005442:	9b04      	ldr	r3, [sp, #16]
 8005444:	3701      	adds	r7, #1
 8005446:	4303      	orrs	r3, r0
 8005448:	9304      	str	r3, [sp, #16]
 800544a:	7839      	ldrb	r1, [r7, #0]
 800544c:	2206      	movs	r2, #6
 800544e:	4827      	ldr	r0, [pc, #156]	; (80054ec <_svfiprintf_r+0x1e4>)
 8005450:	1c7e      	adds	r6, r7, #1
 8005452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005456:	f000 fa81 	bl	800595c <memchr>
 800545a:	2800      	cmp	r0, #0
 800545c:	d038      	beq.n	80054d0 <_svfiprintf_r+0x1c8>
 800545e:	4b24      	ldr	r3, [pc, #144]	; (80054f0 <_svfiprintf_r+0x1e8>)
 8005460:	bb13      	cbnz	r3, 80054a8 <_svfiprintf_r+0x1a0>
 8005462:	9b03      	ldr	r3, [sp, #12]
 8005464:	3307      	adds	r3, #7
 8005466:	f023 0307 	bic.w	r3, r3, #7
 800546a:	3308      	adds	r3, #8
 800546c:	9303      	str	r3, [sp, #12]
 800546e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005470:	444b      	add	r3, r9
 8005472:	9309      	str	r3, [sp, #36]	; 0x24
 8005474:	e76d      	b.n	8005352 <_svfiprintf_r+0x4a>
 8005476:	fb05 3202 	mla	r2, r5, r2, r3
 800547a:	2001      	movs	r0, #1
 800547c:	460f      	mov	r7, r1
 800547e:	e7a6      	b.n	80053ce <_svfiprintf_r+0xc6>
 8005480:	2300      	movs	r3, #0
 8005482:	250a      	movs	r5, #10
 8005484:	4619      	mov	r1, r3
 8005486:	3701      	adds	r7, #1
 8005488:	9305      	str	r3, [sp, #20]
 800548a:	4638      	mov	r0, r7
 800548c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005490:	3a30      	subs	r2, #48	; 0x30
 8005492:	2a09      	cmp	r2, #9
 8005494:	d903      	bls.n	800549e <_svfiprintf_r+0x196>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0c8      	beq.n	800542c <_svfiprintf_r+0x124>
 800549a:	9105      	str	r1, [sp, #20]
 800549c:	e7c6      	b.n	800542c <_svfiprintf_r+0x124>
 800549e:	fb05 2101 	mla	r1, r5, r1, r2
 80054a2:	2301      	movs	r3, #1
 80054a4:	4607      	mov	r7, r0
 80054a6:	e7f0      	b.n	800548a <_svfiprintf_r+0x182>
 80054a8:	ab03      	add	r3, sp, #12
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	4622      	mov	r2, r4
 80054ae:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <_svfiprintf_r+0x1ec>)
 80054b0:	a904      	add	r1, sp, #16
 80054b2:	4640      	mov	r0, r8
 80054b4:	f3af 8000 	nop.w
 80054b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80054bc:	4681      	mov	r9, r0
 80054be:	d1d6      	bne.n	800546e <_svfiprintf_r+0x166>
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	065b      	lsls	r3, r3, #25
 80054c4:	f53f af35 	bmi.w	8005332 <_svfiprintf_r+0x2a>
 80054c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054ca:	b01d      	add	sp, #116	; 0x74
 80054cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d0:	ab03      	add	r3, sp, #12
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	4622      	mov	r2, r4
 80054d6:	4b07      	ldr	r3, [pc, #28]	; (80054f4 <_svfiprintf_r+0x1ec>)
 80054d8:	a904      	add	r1, sp, #16
 80054da:	4640      	mov	r0, r8
 80054dc:	f000 f882 	bl	80055e4 <_printf_i>
 80054e0:	e7ea      	b.n	80054b8 <_svfiprintf_r+0x1b0>
 80054e2:	bf00      	nop
 80054e4:	08005b98 	.word	0x08005b98
 80054e8:	08005b9e 	.word	0x08005b9e
 80054ec:	08005ba2 	.word	0x08005ba2
 80054f0:	00000000 	.word	0x00000000
 80054f4:	08005255 	.word	0x08005255

080054f8 <_printf_common>:
 80054f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054fc:	4691      	mov	r9, r2
 80054fe:	461f      	mov	r7, r3
 8005500:	688a      	ldr	r2, [r1, #8]
 8005502:	690b      	ldr	r3, [r1, #16]
 8005504:	4606      	mov	r6, r0
 8005506:	4293      	cmp	r3, r2
 8005508:	bfb8      	it	lt
 800550a:	4613      	movlt	r3, r2
 800550c:	f8c9 3000 	str.w	r3, [r9]
 8005510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005514:	460c      	mov	r4, r1
 8005516:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800551a:	b112      	cbz	r2, 8005522 <_printf_common+0x2a>
 800551c:	3301      	adds	r3, #1
 800551e:	f8c9 3000 	str.w	r3, [r9]
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	0699      	lsls	r1, r3, #26
 8005526:	bf42      	ittt	mi
 8005528:	f8d9 3000 	ldrmi.w	r3, [r9]
 800552c:	3302      	addmi	r3, #2
 800552e:	f8c9 3000 	strmi.w	r3, [r9]
 8005532:	6825      	ldr	r5, [r4, #0]
 8005534:	f015 0506 	ands.w	r5, r5, #6
 8005538:	d107      	bne.n	800554a <_printf_common+0x52>
 800553a:	f104 0a19 	add.w	sl, r4, #25
 800553e:	68e3      	ldr	r3, [r4, #12]
 8005540:	f8d9 2000 	ldr.w	r2, [r9]
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	42ab      	cmp	r3, r5
 8005548:	dc29      	bgt.n	800559e <_printf_common+0xa6>
 800554a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800554e:	6822      	ldr	r2, [r4, #0]
 8005550:	3300      	adds	r3, #0
 8005552:	bf18      	it	ne
 8005554:	2301      	movne	r3, #1
 8005556:	0692      	lsls	r2, r2, #26
 8005558:	d42e      	bmi.n	80055b8 <_printf_common+0xc0>
 800555a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800555e:	4639      	mov	r1, r7
 8005560:	4630      	mov	r0, r6
 8005562:	47c0      	blx	r8
 8005564:	3001      	adds	r0, #1
 8005566:	d021      	beq.n	80055ac <_printf_common+0xb4>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	68e5      	ldr	r5, [r4, #12]
 800556c:	f003 0306 	and.w	r3, r3, #6
 8005570:	2b04      	cmp	r3, #4
 8005572:	bf18      	it	ne
 8005574:	2500      	movne	r5, #0
 8005576:	f8d9 2000 	ldr.w	r2, [r9]
 800557a:	f04f 0900 	mov.w	r9, #0
 800557e:	bf08      	it	eq
 8005580:	1aad      	subeq	r5, r5, r2
 8005582:	68a3      	ldr	r3, [r4, #8]
 8005584:	6922      	ldr	r2, [r4, #16]
 8005586:	bf08      	it	eq
 8005588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800558c:	4293      	cmp	r3, r2
 800558e:	bfc4      	itt	gt
 8005590:	1a9b      	subgt	r3, r3, r2
 8005592:	18ed      	addgt	r5, r5, r3
 8005594:	341a      	adds	r4, #26
 8005596:	454d      	cmp	r5, r9
 8005598:	d11a      	bne.n	80055d0 <_printf_common+0xd8>
 800559a:	2000      	movs	r0, #0
 800559c:	e008      	b.n	80055b0 <_printf_common+0xb8>
 800559e:	2301      	movs	r3, #1
 80055a0:	4652      	mov	r2, sl
 80055a2:	4639      	mov	r1, r7
 80055a4:	4630      	mov	r0, r6
 80055a6:	47c0      	blx	r8
 80055a8:	3001      	adds	r0, #1
 80055aa:	d103      	bne.n	80055b4 <_printf_common+0xbc>
 80055ac:	f04f 30ff 	mov.w	r0, #4294967295
 80055b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b4:	3501      	adds	r5, #1
 80055b6:	e7c2      	b.n	800553e <_printf_common+0x46>
 80055b8:	2030      	movs	r0, #48	; 0x30
 80055ba:	18e1      	adds	r1, r4, r3
 80055bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055c6:	4422      	add	r2, r4
 80055c8:	3302      	adds	r3, #2
 80055ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055ce:	e7c4      	b.n	800555a <_printf_common+0x62>
 80055d0:	2301      	movs	r3, #1
 80055d2:	4622      	mov	r2, r4
 80055d4:	4639      	mov	r1, r7
 80055d6:	4630      	mov	r0, r6
 80055d8:	47c0      	blx	r8
 80055da:	3001      	adds	r0, #1
 80055dc:	d0e6      	beq.n	80055ac <_printf_common+0xb4>
 80055de:	f109 0901 	add.w	r9, r9, #1
 80055e2:	e7d8      	b.n	8005596 <_printf_common+0x9e>

080055e4 <_printf_i>:
 80055e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80055ec:	460c      	mov	r4, r1
 80055ee:	7e09      	ldrb	r1, [r1, #24]
 80055f0:	b085      	sub	sp, #20
 80055f2:	296e      	cmp	r1, #110	; 0x6e
 80055f4:	4617      	mov	r7, r2
 80055f6:	4606      	mov	r6, r0
 80055f8:	4698      	mov	r8, r3
 80055fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055fc:	f000 80b3 	beq.w	8005766 <_printf_i+0x182>
 8005600:	d822      	bhi.n	8005648 <_printf_i+0x64>
 8005602:	2963      	cmp	r1, #99	; 0x63
 8005604:	d036      	beq.n	8005674 <_printf_i+0x90>
 8005606:	d80a      	bhi.n	800561e <_printf_i+0x3a>
 8005608:	2900      	cmp	r1, #0
 800560a:	f000 80b9 	beq.w	8005780 <_printf_i+0x19c>
 800560e:	2958      	cmp	r1, #88	; 0x58
 8005610:	f000 8083 	beq.w	800571a <_printf_i+0x136>
 8005614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005618:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800561c:	e032      	b.n	8005684 <_printf_i+0xa0>
 800561e:	2964      	cmp	r1, #100	; 0x64
 8005620:	d001      	beq.n	8005626 <_printf_i+0x42>
 8005622:	2969      	cmp	r1, #105	; 0x69
 8005624:	d1f6      	bne.n	8005614 <_printf_i+0x30>
 8005626:	6820      	ldr	r0, [r4, #0]
 8005628:	6813      	ldr	r3, [r2, #0]
 800562a:	0605      	lsls	r5, r0, #24
 800562c:	f103 0104 	add.w	r1, r3, #4
 8005630:	d52a      	bpl.n	8005688 <_printf_i+0xa4>
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6011      	str	r1, [r2, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	da03      	bge.n	8005642 <_printf_i+0x5e>
 800563a:	222d      	movs	r2, #45	; 0x2d
 800563c:	425b      	negs	r3, r3
 800563e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005642:	486f      	ldr	r0, [pc, #444]	; (8005800 <_printf_i+0x21c>)
 8005644:	220a      	movs	r2, #10
 8005646:	e039      	b.n	80056bc <_printf_i+0xd8>
 8005648:	2973      	cmp	r1, #115	; 0x73
 800564a:	f000 809d 	beq.w	8005788 <_printf_i+0x1a4>
 800564e:	d808      	bhi.n	8005662 <_printf_i+0x7e>
 8005650:	296f      	cmp	r1, #111	; 0x6f
 8005652:	d020      	beq.n	8005696 <_printf_i+0xb2>
 8005654:	2970      	cmp	r1, #112	; 0x70
 8005656:	d1dd      	bne.n	8005614 <_printf_i+0x30>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	f043 0320 	orr.w	r3, r3, #32
 800565e:	6023      	str	r3, [r4, #0]
 8005660:	e003      	b.n	800566a <_printf_i+0x86>
 8005662:	2975      	cmp	r1, #117	; 0x75
 8005664:	d017      	beq.n	8005696 <_printf_i+0xb2>
 8005666:	2978      	cmp	r1, #120	; 0x78
 8005668:	d1d4      	bne.n	8005614 <_printf_i+0x30>
 800566a:	2378      	movs	r3, #120	; 0x78
 800566c:	4865      	ldr	r0, [pc, #404]	; (8005804 <_printf_i+0x220>)
 800566e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005672:	e055      	b.n	8005720 <_printf_i+0x13c>
 8005674:	6813      	ldr	r3, [r2, #0]
 8005676:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800567a:	1d19      	adds	r1, r3, #4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6011      	str	r1, [r2, #0]
 8005680:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005684:	2301      	movs	r3, #1
 8005686:	e08c      	b.n	80057a2 <_printf_i+0x1be>
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800568e:	6011      	str	r1, [r2, #0]
 8005690:	bf18      	it	ne
 8005692:	b21b      	sxthne	r3, r3
 8005694:	e7cf      	b.n	8005636 <_printf_i+0x52>
 8005696:	6813      	ldr	r3, [r2, #0]
 8005698:	6825      	ldr	r5, [r4, #0]
 800569a:	1d18      	adds	r0, r3, #4
 800569c:	6010      	str	r0, [r2, #0]
 800569e:	0628      	lsls	r0, r5, #24
 80056a0:	d501      	bpl.n	80056a6 <_printf_i+0xc2>
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	e002      	b.n	80056ac <_printf_i+0xc8>
 80056a6:	0668      	lsls	r0, r5, #25
 80056a8:	d5fb      	bpl.n	80056a2 <_printf_i+0xbe>
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	296f      	cmp	r1, #111	; 0x6f
 80056ae:	bf14      	ite	ne
 80056b0:	220a      	movne	r2, #10
 80056b2:	2208      	moveq	r2, #8
 80056b4:	4852      	ldr	r0, [pc, #328]	; (8005800 <_printf_i+0x21c>)
 80056b6:	2100      	movs	r1, #0
 80056b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056bc:	6865      	ldr	r5, [r4, #4]
 80056be:	2d00      	cmp	r5, #0
 80056c0:	60a5      	str	r5, [r4, #8]
 80056c2:	f2c0 8095 	blt.w	80057f0 <_printf_i+0x20c>
 80056c6:	6821      	ldr	r1, [r4, #0]
 80056c8:	f021 0104 	bic.w	r1, r1, #4
 80056cc:	6021      	str	r1, [r4, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d13d      	bne.n	800574e <_printf_i+0x16a>
 80056d2:	2d00      	cmp	r5, #0
 80056d4:	f040 808e 	bne.w	80057f4 <_printf_i+0x210>
 80056d8:	4665      	mov	r5, ip
 80056da:	2a08      	cmp	r2, #8
 80056dc:	d10b      	bne.n	80056f6 <_printf_i+0x112>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	07db      	lsls	r3, r3, #31
 80056e2:	d508      	bpl.n	80056f6 <_printf_i+0x112>
 80056e4:	6923      	ldr	r3, [r4, #16]
 80056e6:	6862      	ldr	r2, [r4, #4]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	bfde      	ittt	le
 80056ec:	2330      	movle	r3, #48	; 0x30
 80056ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056f6:	ebac 0305 	sub.w	r3, ip, r5
 80056fa:	6123      	str	r3, [r4, #16]
 80056fc:	f8cd 8000 	str.w	r8, [sp]
 8005700:	463b      	mov	r3, r7
 8005702:	aa03      	add	r2, sp, #12
 8005704:	4621      	mov	r1, r4
 8005706:	4630      	mov	r0, r6
 8005708:	f7ff fef6 	bl	80054f8 <_printf_common>
 800570c:	3001      	adds	r0, #1
 800570e:	d14d      	bne.n	80057ac <_printf_i+0x1c8>
 8005710:	f04f 30ff 	mov.w	r0, #4294967295
 8005714:	b005      	add	sp, #20
 8005716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800571a:	4839      	ldr	r0, [pc, #228]	; (8005800 <_printf_i+0x21c>)
 800571c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005720:	6813      	ldr	r3, [r2, #0]
 8005722:	6821      	ldr	r1, [r4, #0]
 8005724:	1d1d      	adds	r5, r3, #4
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6015      	str	r5, [r2, #0]
 800572a:	060a      	lsls	r2, r1, #24
 800572c:	d50b      	bpl.n	8005746 <_printf_i+0x162>
 800572e:	07ca      	lsls	r2, r1, #31
 8005730:	bf44      	itt	mi
 8005732:	f041 0120 	orrmi.w	r1, r1, #32
 8005736:	6021      	strmi	r1, [r4, #0]
 8005738:	b91b      	cbnz	r3, 8005742 <_printf_i+0x15e>
 800573a:	6822      	ldr	r2, [r4, #0]
 800573c:	f022 0220 	bic.w	r2, r2, #32
 8005740:	6022      	str	r2, [r4, #0]
 8005742:	2210      	movs	r2, #16
 8005744:	e7b7      	b.n	80056b6 <_printf_i+0xd2>
 8005746:	064d      	lsls	r5, r1, #25
 8005748:	bf48      	it	mi
 800574a:	b29b      	uxthmi	r3, r3
 800574c:	e7ef      	b.n	800572e <_printf_i+0x14a>
 800574e:	4665      	mov	r5, ip
 8005750:	fbb3 f1f2 	udiv	r1, r3, r2
 8005754:	fb02 3311 	mls	r3, r2, r1, r3
 8005758:	5cc3      	ldrb	r3, [r0, r3]
 800575a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800575e:	460b      	mov	r3, r1
 8005760:	2900      	cmp	r1, #0
 8005762:	d1f5      	bne.n	8005750 <_printf_i+0x16c>
 8005764:	e7b9      	b.n	80056da <_printf_i+0xf6>
 8005766:	6813      	ldr	r3, [r2, #0]
 8005768:	6825      	ldr	r5, [r4, #0]
 800576a:	1d18      	adds	r0, r3, #4
 800576c:	6961      	ldr	r1, [r4, #20]
 800576e:	6010      	str	r0, [r2, #0]
 8005770:	0628      	lsls	r0, r5, #24
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	d501      	bpl.n	800577a <_printf_i+0x196>
 8005776:	6019      	str	r1, [r3, #0]
 8005778:	e002      	b.n	8005780 <_printf_i+0x19c>
 800577a:	066a      	lsls	r2, r5, #25
 800577c:	d5fb      	bpl.n	8005776 <_printf_i+0x192>
 800577e:	8019      	strh	r1, [r3, #0]
 8005780:	2300      	movs	r3, #0
 8005782:	4665      	mov	r5, ip
 8005784:	6123      	str	r3, [r4, #16]
 8005786:	e7b9      	b.n	80056fc <_printf_i+0x118>
 8005788:	6813      	ldr	r3, [r2, #0]
 800578a:	1d19      	adds	r1, r3, #4
 800578c:	6011      	str	r1, [r2, #0]
 800578e:	681d      	ldr	r5, [r3, #0]
 8005790:	6862      	ldr	r2, [r4, #4]
 8005792:	2100      	movs	r1, #0
 8005794:	4628      	mov	r0, r5
 8005796:	f000 f8e1 	bl	800595c <memchr>
 800579a:	b108      	cbz	r0, 80057a0 <_printf_i+0x1bc>
 800579c:	1b40      	subs	r0, r0, r5
 800579e:	6060      	str	r0, [r4, #4]
 80057a0:	6863      	ldr	r3, [r4, #4]
 80057a2:	6123      	str	r3, [r4, #16]
 80057a4:	2300      	movs	r3, #0
 80057a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057aa:	e7a7      	b.n	80056fc <_printf_i+0x118>
 80057ac:	6923      	ldr	r3, [r4, #16]
 80057ae:	462a      	mov	r2, r5
 80057b0:	4639      	mov	r1, r7
 80057b2:	4630      	mov	r0, r6
 80057b4:	47c0      	blx	r8
 80057b6:	3001      	adds	r0, #1
 80057b8:	d0aa      	beq.n	8005710 <_printf_i+0x12c>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	079b      	lsls	r3, r3, #30
 80057be:	d413      	bmi.n	80057e8 <_printf_i+0x204>
 80057c0:	68e0      	ldr	r0, [r4, #12]
 80057c2:	9b03      	ldr	r3, [sp, #12]
 80057c4:	4298      	cmp	r0, r3
 80057c6:	bfb8      	it	lt
 80057c8:	4618      	movlt	r0, r3
 80057ca:	e7a3      	b.n	8005714 <_printf_i+0x130>
 80057cc:	2301      	movs	r3, #1
 80057ce:	464a      	mov	r2, r9
 80057d0:	4639      	mov	r1, r7
 80057d2:	4630      	mov	r0, r6
 80057d4:	47c0      	blx	r8
 80057d6:	3001      	adds	r0, #1
 80057d8:	d09a      	beq.n	8005710 <_printf_i+0x12c>
 80057da:	3501      	adds	r5, #1
 80057dc:	68e3      	ldr	r3, [r4, #12]
 80057de:	9a03      	ldr	r2, [sp, #12]
 80057e0:	1a9b      	subs	r3, r3, r2
 80057e2:	42ab      	cmp	r3, r5
 80057e4:	dcf2      	bgt.n	80057cc <_printf_i+0x1e8>
 80057e6:	e7eb      	b.n	80057c0 <_printf_i+0x1dc>
 80057e8:	2500      	movs	r5, #0
 80057ea:	f104 0919 	add.w	r9, r4, #25
 80057ee:	e7f5      	b.n	80057dc <_printf_i+0x1f8>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1ac      	bne.n	800574e <_printf_i+0x16a>
 80057f4:	7803      	ldrb	r3, [r0, #0]
 80057f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057fe:	e76c      	b.n	80056da <_printf_i+0xf6>
 8005800:	08005ba9 	.word	0x08005ba9
 8005804:	08005bba 	.word	0x08005bba

08005808 <_sbrk_r>:
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	2300      	movs	r3, #0
 800580c:	4c05      	ldr	r4, [pc, #20]	; (8005824 <_sbrk_r+0x1c>)
 800580e:	4605      	mov	r5, r0
 8005810:	4608      	mov	r0, r1
 8005812:	6023      	str	r3, [r4, #0]
 8005814:	f7ff f8c0 	bl	8004998 <_sbrk>
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	d102      	bne.n	8005822 <_sbrk_r+0x1a>
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	b103      	cbz	r3, 8005822 <_sbrk_r+0x1a>
 8005820:	602b      	str	r3, [r5, #0]
 8005822:	bd38      	pop	{r3, r4, r5, pc}
 8005824:	2000101c 	.word	0x2000101c

08005828 <__sread>:
 8005828:	b510      	push	{r4, lr}
 800582a:	460c      	mov	r4, r1
 800582c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005830:	f000 f8e4 	bl	80059fc <_read_r>
 8005834:	2800      	cmp	r0, #0
 8005836:	bfab      	itete	ge
 8005838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800583a:	89a3      	ldrhlt	r3, [r4, #12]
 800583c:	181b      	addge	r3, r3, r0
 800583e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005842:	bfac      	ite	ge
 8005844:	6563      	strge	r3, [r4, #84]	; 0x54
 8005846:	81a3      	strhlt	r3, [r4, #12]
 8005848:	bd10      	pop	{r4, pc}

0800584a <__swrite>:
 800584a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584e:	461f      	mov	r7, r3
 8005850:	898b      	ldrh	r3, [r1, #12]
 8005852:	4605      	mov	r5, r0
 8005854:	05db      	lsls	r3, r3, #23
 8005856:	460c      	mov	r4, r1
 8005858:	4616      	mov	r6, r2
 800585a:	d505      	bpl.n	8005868 <__swrite+0x1e>
 800585c:	2302      	movs	r3, #2
 800585e:	2200      	movs	r2, #0
 8005860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005864:	f000 f868 	bl	8005938 <_lseek_r>
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	4632      	mov	r2, r6
 800586c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005870:	81a3      	strh	r3, [r4, #12]
 8005872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005876:	463b      	mov	r3, r7
 8005878:	4628      	mov	r0, r5
 800587a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800587e:	f000 b817 	b.w	80058b0 <_write_r>

08005882 <__sseek>:
 8005882:	b510      	push	{r4, lr}
 8005884:	460c      	mov	r4, r1
 8005886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800588a:	f000 f855 	bl	8005938 <_lseek_r>
 800588e:	1c43      	adds	r3, r0, #1
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	bf15      	itete	ne
 8005894:	6560      	strne	r0, [r4, #84]	; 0x54
 8005896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800589a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800589e:	81a3      	strheq	r3, [r4, #12]
 80058a0:	bf18      	it	ne
 80058a2:	81a3      	strhne	r3, [r4, #12]
 80058a4:	bd10      	pop	{r4, pc}

080058a6 <__sclose>:
 80058a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058aa:	f000 b813 	b.w	80058d4 <_close_r>
	...

080058b0 <_write_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	4605      	mov	r5, r0
 80058b4:	4608      	mov	r0, r1
 80058b6:	4611      	mov	r1, r2
 80058b8:	2200      	movs	r2, #0
 80058ba:	4c05      	ldr	r4, [pc, #20]	; (80058d0 <_write_r+0x20>)
 80058bc:	6022      	str	r2, [r4, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	f7ff f81e 	bl	8004900 <_write>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	d102      	bne.n	80058ce <_write_r+0x1e>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	b103      	cbz	r3, 80058ce <_write_r+0x1e>
 80058cc:	602b      	str	r3, [r5, #0]
 80058ce:	bd38      	pop	{r3, r4, r5, pc}
 80058d0:	2000101c 	.word	0x2000101c

080058d4 <_close_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	2300      	movs	r3, #0
 80058d8:	4c05      	ldr	r4, [pc, #20]	; (80058f0 <_close_r+0x1c>)
 80058da:	4605      	mov	r5, r0
 80058dc:	4608      	mov	r0, r1
 80058de:	6023      	str	r3, [r4, #0]
 80058e0:	f7ff f82a 	bl	8004938 <_close>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_close_r+0x1a>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_close_r+0x1a>
 80058ec:	602b      	str	r3, [r5, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	2000101c 	.word	0x2000101c

080058f4 <_fstat_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	2300      	movs	r3, #0
 80058f8:	4c06      	ldr	r4, [pc, #24]	; (8005914 <_fstat_r+0x20>)
 80058fa:	4605      	mov	r5, r0
 80058fc:	4608      	mov	r0, r1
 80058fe:	4611      	mov	r1, r2
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	f7ff f824 	bl	800494e <_fstat>
 8005906:	1c43      	adds	r3, r0, #1
 8005908:	d102      	bne.n	8005910 <_fstat_r+0x1c>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	b103      	cbz	r3, 8005910 <_fstat_r+0x1c>
 800590e:	602b      	str	r3, [r5, #0]
 8005910:	bd38      	pop	{r3, r4, r5, pc}
 8005912:	bf00      	nop
 8005914:	2000101c 	.word	0x2000101c

08005918 <_isatty_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	2300      	movs	r3, #0
 800591c:	4c05      	ldr	r4, [pc, #20]	; (8005934 <_isatty_r+0x1c>)
 800591e:	4605      	mov	r5, r0
 8005920:	4608      	mov	r0, r1
 8005922:	6023      	str	r3, [r4, #0]
 8005924:	f7ff f822 	bl	800496c <_isatty>
 8005928:	1c43      	adds	r3, r0, #1
 800592a:	d102      	bne.n	8005932 <_isatty_r+0x1a>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	b103      	cbz	r3, 8005932 <_isatty_r+0x1a>
 8005930:	602b      	str	r3, [r5, #0]
 8005932:	bd38      	pop	{r3, r4, r5, pc}
 8005934:	2000101c 	.word	0x2000101c

08005938 <_lseek_r>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	4605      	mov	r5, r0
 800593c:	4608      	mov	r0, r1
 800593e:	4611      	mov	r1, r2
 8005940:	2200      	movs	r2, #0
 8005942:	4c05      	ldr	r4, [pc, #20]	; (8005958 <_lseek_r+0x20>)
 8005944:	6022      	str	r2, [r4, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	f7ff f81a 	bl	8004980 <_lseek>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d102      	bne.n	8005956 <_lseek_r+0x1e>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	b103      	cbz	r3, 8005956 <_lseek_r+0x1e>
 8005954:	602b      	str	r3, [r5, #0]
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	2000101c 	.word	0x2000101c

0800595c <memchr>:
 800595c:	b510      	push	{r4, lr}
 800595e:	b2c9      	uxtb	r1, r1
 8005960:	4402      	add	r2, r0
 8005962:	4290      	cmp	r0, r2
 8005964:	4603      	mov	r3, r0
 8005966:	d101      	bne.n	800596c <memchr+0x10>
 8005968:	2300      	movs	r3, #0
 800596a:	e003      	b.n	8005974 <memchr+0x18>
 800596c:	781c      	ldrb	r4, [r3, #0]
 800596e:	3001      	adds	r0, #1
 8005970:	428c      	cmp	r4, r1
 8005972:	d1f6      	bne.n	8005962 <memchr+0x6>
 8005974:	4618      	mov	r0, r3
 8005976:	bd10      	pop	{r4, pc}

08005978 <memmove>:
 8005978:	4288      	cmp	r0, r1
 800597a:	b510      	push	{r4, lr}
 800597c:	eb01 0302 	add.w	r3, r1, r2
 8005980:	d807      	bhi.n	8005992 <memmove+0x1a>
 8005982:	1e42      	subs	r2, r0, #1
 8005984:	4299      	cmp	r1, r3
 8005986:	d00a      	beq.n	800599e <memmove+0x26>
 8005988:	f811 4b01 	ldrb.w	r4, [r1], #1
 800598c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005990:	e7f8      	b.n	8005984 <memmove+0xc>
 8005992:	4283      	cmp	r3, r0
 8005994:	d9f5      	bls.n	8005982 <memmove+0xa>
 8005996:	1881      	adds	r1, r0, r2
 8005998:	1ad2      	subs	r2, r2, r3
 800599a:	42d3      	cmn	r3, r2
 800599c:	d100      	bne.n	80059a0 <memmove+0x28>
 800599e:	bd10      	pop	{r4, pc}
 80059a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80059a8:	e7f7      	b.n	800599a <memmove+0x22>

080059aa <__malloc_lock>:
 80059aa:	4770      	bx	lr

080059ac <__malloc_unlock>:
 80059ac:	4770      	bx	lr

080059ae <_realloc_r>:
 80059ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b0:	4607      	mov	r7, r0
 80059b2:	4614      	mov	r4, r2
 80059b4:	460e      	mov	r6, r1
 80059b6:	b921      	cbnz	r1, 80059c2 <_realloc_r+0x14>
 80059b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80059bc:	4611      	mov	r1, r2
 80059be:	f7ff bbef 	b.w	80051a0 <_malloc_r>
 80059c2:	b922      	cbnz	r2, 80059ce <_realloc_r+0x20>
 80059c4:	f7ff fba0 	bl	8005108 <_free_r>
 80059c8:	4625      	mov	r5, r4
 80059ca:	4628      	mov	r0, r5
 80059cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ce:	f000 f827 	bl	8005a20 <_malloc_usable_size_r>
 80059d2:	42a0      	cmp	r0, r4
 80059d4:	d20f      	bcs.n	80059f6 <_realloc_r+0x48>
 80059d6:	4621      	mov	r1, r4
 80059d8:	4638      	mov	r0, r7
 80059da:	f7ff fbe1 	bl	80051a0 <_malloc_r>
 80059de:	4605      	mov	r5, r0
 80059e0:	2800      	cmp	r0, #0
 80059e2:	d0f2      	beq.n	80059ca <_realloc_r+0x1c>
 80059e4:	4631      	mov	r1, r6
 80059e6:	4622      	mov	r2, r4
 80059e8:	f7ff f858 	bl	8004a9c <memcpy>
 80059ec:	4631      	mov	r1, r6
 80059ee:	4638      	mov	r0, r7
 80059f0:	f7ff fb8a 	bl	8005108 <_free_r>
 80059f4:	e7e9      	b.n	80059ca <_realloc_r+0x1c>
 80059f6:	4635      	mov	r5, r6
 80059f8:	e7e7      	b.n	80059ca <_realloc_r+0x1c>
	...

080059fc <_read_r>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	4605      	mov	r5, r0
 8005a00:	4608      	mov	r0, r1
 8005a02:	4611      	mov	r1, r2
 8005a04:	2200      	movs	r2, #0
 8005a06:	4c05      	ldr	r4, [pc, #20]	; (8005a1c <_read_r+0x20>)
 8005a08:	6022      	str	r2, [r4, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f7fe ff5b 	bl	80048c6 <_read>
 8005a10:	1c43      	adds	r3, r0, #1
 8005a12:	d102      	bne.n	8005a1a <_read_r+0x1e>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	b103      	cbz	r3, 8005a1a <_read_r+0x1e>
 8005a18:	602b      	str	r3, [r5, #0]
 8005a1a:	bd38      	pop	{r3, r4, r5, pc}
 8005a1c:	2000101c 	.word	0x2000101c

08005a20 <_malloc_usable_size_r>:
 8005a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a24:	1f18      	subs	r0, r3, #4
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	bfbc      	itt	lt
 8005a2a:	580b      	ldrlt	r3, [r1, r0]
 8005a2c:	18c0      	addlt	r0, r0, r3
 8005a2e:	4770      	bx	lr

08005a30 <_init>:
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a32:	bf00      	nop
 8005a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a36:	bc08      	pop	{r3}
 8005a38:	469e      	mov	lr, r3
 8005a3a:	4770      	bx	lr

08005a3c <_fini>:
 8005a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3e:	bf00      	nop
 8005a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a42:	bc08      	pop	{r3}
 8005a44:	469e      	mov	lr, r3
 8005a46:	4770      	bx	lr
